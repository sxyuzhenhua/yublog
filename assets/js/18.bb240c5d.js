(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{216:function(n,e,t){"use strict";t.r(e);var a=t(0),r=Object(a.a)({},(function(){var n=this.$createElement;this._self._c;return this._m(0)}),[function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("div",{staticClass:"content"},[t("h2",{attrs:{id:"关于循环-await-异步面试题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#关于循环-await-异步面试题"}},[n._v("#")]),n._v(" 关于循环 + await 异步面试题")]),n._v(" "),t("p",[n._v("下面代码输出什么，为什么，如果希望每隔1秒输出一个结果，应该怎么做？请修改里面的代码")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    const list = [1, 2, 3];\n    const square = (num) => {\n        return new Promise((resolve, reject) => {\n            setTimeout(() => {\n                resolve(num*num)\n            },2000 )\n        })\n    }\n\n    list.forEach(async item => {\n        let res = await square(item);\n        console.log(res);\n    })\n")])])]),t("p",[n._v("方法一：递归")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    const list = [1, 2, 3];\n    const square = (num) => {\n        return new Promise((resolve, reject) => {\n            setTimeout(() => {\n                resolve(num*num)\n            },2000 )\n        })\n    }\n\n    let idx = 0;\n    async function recur() {\n        if(idx >= list.length) {return;}\n        let res = await square(list[idx]);\n        console.log(res);\n        idx++;\n        recur();\n    }\n\n    recur()\n")])])]),t("p",[n._v("方法二： for await of")]),n._v(" "),t("ul",[t("li",[n._v("基于 Symbol.asyncIterator 这个方法执行【这个方法遵循 generator_iterator】, 返回迭代器对象")]),n._v(" "),t("li",[n._v("每一轮循环都是迭代器对象.next() -> {value:yiled后处理的值(Promise实例), done: false}")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    const test = async  function test() {\n        let idx = 0;\n        list[Symbol.asyncIterator] = async function* () {\n            yield square(list[idx++]);\n            yield square(list[idx++]);\n            yield square(list[idx++]);\n        }\n\n        for await (let res of list) {\n            console.log(res);\n        }\n    }\n\n    test()\n\n")])])]),t("h2",{attrs:{id:"对两个版本号进行大小比较"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#对两个版本号进行大小比较"}},[n._v("#")]),n._v(" 对两个版本号进行大小比较")]),n._v(" "),t("p",[n._v("{MAJOR}.{MINOR}.{PATCH}-{alpha|beta|rc}.{number}， 要求实现compare(a,b)方法，比较ab两个版本大小。"),t("br"),n._v("\na>b 返回1；"),t("br"),n._v("\na=b 返回0;"),t("br"),n._v("\na<b 返回-1;"),t("br"),n._v("\n其中 rc>beta>alpha, major>minor>patch;"),t("br"),n._v("\n例子： 1.2.3 < 1.2.4 < 1.3.0-alpha.1 < 1.3.0-alpha.2 < 1.3.0-beta.1 < 1.3.0-rc.1 < 1.3.0")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("function compare(a, b) {\n   let reg = /^\\d(\\.\\d){2}(-(alpha|beta|rc)\\.\\d+)?$/i;\n   if(!reg.test(a) || !reg.test(b)) throw new Error('请输入正确的版本号')\n\n   a = a.split(/(?:\\.|-)/g); // ?: 只匹配不捕获\n   b = b.split(/(?:\\.|-)/g);\n   console.log(a, b);\n\n   let n = -1, flag, diff;\n   const recur = () => {\n       n++;\n       let item1 = a[n], item2 = b[n];\n       if(!item1 && !item2) {\n           flag = 0;\n           return flag;\n       }\n       if(!item1 && item2) {\n           flag = 1\n           return flag;\n       }\n       if(item1 && !item2) {\n           flag = -1;\n           return flag;\n       }\n       diff = (isNaN(item1) || isNaN(item2)) ? item1.localeCompare(item2) : item1 - item2;\n       if(diff === 0) {\n           recur();\n           return;\n       }\n       flag  = diff > 0 ? 1 : -1;\n   }\n\n   recur();\n   return flag\n}\n\nconsole.log(compare('1.2.3', '1.2.3-beta.1'));\n\n")])])]),t("h2",{attrs:{id:"实现多维对象的扁平化处理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现多维对象的扁平化处理"}},[n._v("#")]),n._v(" 实现多维对象的扁平化处理")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("// 处理后的结果：\nlet o = {\n    1: 100,\n    'a.b': 1,\n    'a.c': 2,\n    'a.d.e': 3,\n    'a.d[2]': 200,\n    'b[0]': 1,\n    'b[1]': 2,\n    'b[2][a]': 3,\n    'b[2][b]': 4,\n    'c': 1\n}\n\nconst each = function each(obj, callback) {\n    if(obj === null)\n}\n\n    const obj = {\n        a: {\n            b: 1,\n            c: 2,\n            d: { e: 3, 2: 200 },\n        },\n        b: [1, 2, { a: 3, b: 4 } ],\n        c: 1,\n        1: 100\n    }\n\n\n    Object.defineProperty(Object, 'flatten', {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function(obj) {\n            let result = {};\n            const recur = (obj) => {\n                for (let key in obj) {\n                    if(Array.isArray(obj[key])) {\n\n                    }\n                }\n            }\n        }\n    })\n")])])]),t("h2",{attrs:{id:"实现对“url问号传参”的解析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现对“url问号传参”的解析"}},[n._v("#")]),n._v(" 实现对“URL问号传参”的解析")]),n._v(" "),t("p",[n._v("例如： url 地址是 http://www.baidu.com?name=zhangsan&age=20#man\n编写 queryURLParams 方法实现出：")]),n._v(" "),t("ul",[t("li",[n._v("url.queryURLParams() => {name: 'zhangsan', age: 20, 'HASH': 'man'}")]),n._v(" "),t("li",[n._v("url.queryURLParams() => {name: 'zhangsan', age: 20, 'HASH': 'man'}")]),n._v(" "),t("li",[n._v("url.queryURLParams('name') => 'zhangsan'")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    const url = 'http://www.baidu.com?name=zhangsan&age=20#man';\n\n    Object.defineProperty(String.prototype, 'queryURLParams', {\n        value: function queryURLParams(key) {\n            let result = {};\n            this.replace(/([^?#&=]*)=([^?#&=]*)/g, function(val, $1, $2) {\n                result[$1] = $2;\n            })\n\n            this.replace(/#([^#?&=]*)/g, function(val, $1) {\n                result['HASH'] = $1;\n            })\n            return typeof  key !== 'undefined' ? result[key] : result;\n        }\n    })\n\n    console.log(url.queryURLParams());\n    console.log(url.queryURLParams('name'));\n")])])]),t("h2",{attrs:{id:"阿拉伯数字转为中文数字"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#阿拉伯数字转为中文数字"}},[n._v("#")]),n._v(" 阿拉伯数字转为中文数字")]),n._v(" "),t("ul",[t("li",[n._v("编写 computed 方法实现：")]),n._v(" "),t("li",[n._v("console.log(computed(20876)); // 二万零八百七十六")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("   const num = 10376;\n\n    function computed(num) {\n        if(isNaN(num)) {\n            throw new Error('请输入合法数字');\n            return ;\n        }\n        if(num === 0) {\n            return '零';\n        }\n        if(num.toString().length > 5) {\n            throw new Error('输入的数字长度不合法');\n            return;\n        }\n        const numArray = ['零','一', '二', '三', '四', '五', '六', '七', '八', '九'];\n        const unitArray = ['', '十', '百', '千', '万'];\n        let s = num.toString().split('').reverse().map((item, index) => {\n            return numArray[item] + (item > 0 ? unitArray[index] : '');\n        }).reverse();\n        console.log(s);\n        if(s[s.length-1] === '零') {\n            s = s.slice(0, -1);\n        }\n        return s.join('');\n    }\n\n    console.log(computed(num))\n")])])]),t("h2",{attrs:{id:"将一维数组转换成树形结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#将一维数组转换成树形结构"}},[n._v("#")]),n._v(" 将一维数组转换成树形结构")]),n._v(" "),t("p",[n._v("请使用 javascript 写一个自定义函数将下列数组转化为树形结构")]),n._v(" "),t("p",[n._v("方法一:")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    var data = [\n        { id: 0, parentId: null, text: '第一级文字' },\n        { id: 1, parentId: 0, text: '第二级文字' },\n        { id: 2, parentId: 0, text: '第三级文字' },\n        { id: 3, parentId: null, text: '第四级文字' },\n        { id: 4, parentId: null, text: '第五级文字' },\n        { id: 5, parentId: 3, text: '第六级文字' },\n        { id: 6, parentId: 3, text: '第七级文字' },\n    ];\n\n    function tree(data) {\n        let res = data.filter(item => item.parentId === null);\n        \n        res.forEach(item => {\n            let child = data.filter(cur => cur.parentId === item.id)\n            if(child.length > 0) {\n                if(!item.children) {\n                    item.children = []\n                }\n                item.children.push(child);\n            }\n        })\n        return res;\n    }\n\n    console.log(tree(data));\n\n")])])]),t("p",[n._v("方法二： 利用 Map, O(n)")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("function tree(data) {\n        let map = new Map();\n        data.forEach(item => {\n            map.set(item.id, item)\n        })\n        let result = [];\n        data.forEach(cur => {\n            if(cur.parentId === null) {\n                result.push(cur);\n                return;\n            }\n            let parent =  map.get(cur.parentId);\n            parent.children ? parent.children.push(cur) : parent.children = [cur]; \n        })\n        return result;\n    }\n\n    console.log(tree(data));\n\n")])])]),t("h2",{attrs:{id:"在多维数据结构中，按条件实现深层查找"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#在多维数据结构中，按条件实现深层查找"}},[n._v("#")]),n._v(" 在多维数据结构中，按条件实现深层查找")]),n._v(" "),t("h2",{attrs:{id:"基于js实现-均匀运动-的动画"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基于js实现-均匀运动-的动画"}},[n._v("#")]),n._v(' 基于JS实现 "均匀运动" 的动画')]),n._v(" "),t("ul",[t("li",[n._v("基于 JS 实现 “匀速运动” 的动画")]),n._v(" "),t("li",[n._v("问题描述： 用js 实现 div 元素向右平滑移动300px，耗时1秒，不能使用transition")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('    <style>\n        .ball {\n            width: 100px;\n            height: 100px;\n            background-color: pink;\n        }\n    </style>\n</head>\n<body>\n    <div class="ball" id="box">asdsad</div>\n    <script>\n        \n        (function() {\n            let box = document.getElementById(\'box\');\n            // s: 起始位置， e: 总距离,结束位置， t: 已经运动的时间； d: 总时间\n            const linear = (s, e, t, d) => {\n                return t/d*e + s;\n            }\n            let time = 0;\n            let timer = setInterval(() => {\n                if(time > 1000) {\n                    clearInterval(timer);\n                    return;\n                }\n                let distance = linear(0, 300, time, 1000)\n                time += 17;\n                box.style.transform = `translateX(${distance}px)`\n            }, 17);\n        })();\n    <\/script>\n</body>\n')])])]),t("h2",{attrs:{id:"关于规避请求失败，递归获取需要数据的问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#关于规避请求失败，递归获取需要数据的问题"}},[n._v("#")]),n._v(" 关于规避请求失败，递归获取需要数据的问题")]),n._v(" "),t("p",[n._v("现有一个POST接口: https://xxx.com/students， 每次请求只能返回10个学生的课程成绩，如下：")]),n._v(" "),t("blockquote",[t("p",[n._v("[\n{ name: '张三', score: 99, time: '2021-12-22' },\n{ name: '李四', score: 60, time: '2022-01-19' },\n{ name: '王武', score: 70, time: '2021-08-12' },\n{ name: '赵丽', score: 80, time: '2021-09-02' },\n]")])]),n._v(" "),t("ul",[t("li",[n._v("该接口又一定概率请求失败，不可忽略，Response Status Code 500, Body 为空")]),n._v(" "),t("li",[n._v("要求： 实现一个函数，总共需要获得100个成绩大于90分，切时间在2021年12月03日之后的学生的课程成绩，并按个字成绩从大到小排列返回(可直接使用fetch 或 axios)")]),n._v(" "),t("li",[n._v("提示： 浏览器最多可以有6个并行的网络请求")]),n._v(" "),t("li",[n._v("尽可能在更多的时间内，运行完成得到结果")]),n._v(" "),t("li",[n._v("尽可能用最少的请求次数")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("\x3c!-- 模拟数据请求的方法 --\x3e\nconst source = axios.CancelToken.source();\nconst query = function query() {\n    return axios.post('https://xxx.com/students', null, { cancelToken: source.token} )\n    .then(response => response.data)\n}\n\n    const fetchStudents = function fetchStudents() {\n        return new promise(resolve => {\n            let works = new Array(6).fill(null), values = [], flag = false;\n\n            works.forEach(() => {\n                \x3c!-- 每个工作区都基于递归，一遍遍的去获取学生信息 --\x3e\n                const next = async () => {\n                    if(flag) return;\n                    \x3c!-- 请求结束，取消还在发送的请求 --\x3e\n                    if(values.length > 100) {\n                        flag = true;\n                        source.cancel();\n                        resolve(values.slice(0, 100), sort((a, b) => b.score-a.score))\n                        return;\n                    }\n                    try {\n                        let value = await query()\n                        value = value.filter(item => item.score > 90 && (new Date(item.time) - new Date('2021-12-03') > 0));\n                        values.concat(value);\n                    } catch(e) {}\n                    next()\n                }\n                next();\n            })\n        })\n    }\n\n")])])]),t("h2",{attrs:{id:"仿抖音发布视频时的-“-话题解析”-逻辑"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#仿抖音发布视频时的-“-话题解析”-逻辑"}},[n._v("#")]),n._v(" 仿抖音发布视频时的 “#话题解析” 逻辑")]),n._v(" "),t("h2",{attrs:{id:"词法环境，变量环境，outer-作用域链-和-this"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#词法环境，变量环境，outer-作用域链-和-this"}},[n._v("#")]),n._v(" (词法环境，变量环境，outer)[作用域链]   和 this")]),n._v(" "),t("p",[n._v("变量跟定义的位置有关系，this跟执行的时候有关系")])])}],!1,null,null,null);e.default=r.exports}}]);