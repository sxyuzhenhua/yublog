(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{211:function(e,n,t){"use strict";t.r(n);var s=t(0),r=Object(s.a)({},(function(){var e=this.$createElement;this._self._c;return this._m(0)}),[function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("div",{staticClass:"content"},[t("h3",{attrs:{id:"类型定义公约"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类型定义公约"}},[e._v("#")]),e._v(" 类型定义公约")]),e._v(" "),t("ul",[t("li",[e._v("定义 type 尽量不使用any")]),e._v(" "),t("li",[e._v("Component的Props 需要定义 type")]),e._v(" "),t("li",[e._v("function / hook 需要定义 type")]),e._v(" "),t("li",[e._v("state 需要定义 type")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("\x3c!-- 旧的 --\x3e\n    const useDate = () => {\n        const [{ start, end }, setDate] = useState({ start: null, end: null });\n        const onChange = (newStart, newEnd) => {\n            setDate({ start: newStart, end: newEnd });\n        };\n        return [start, end, onChange];\n    };\n\n    export const Header = (props) => {\n        const { getData } = props;\n\n        const [placementID, setPlacementID] = useState<string>();\n        const [start, end, onChange] = useDate();\n    };\n\n\x3c!-- 新的 --\x3e\nconst useDate = (): [string, string, (newStart: string, newEnd: string) => void] => {\n    const [{ start, end }, setDate] = useState<Record<'start' | 'end', string>>({ start: null, end: null });\n    const onChange = (newStart, newEnd) => {\n        setDate({ start: newStart, end: newEnd });\n    };\n    return [start, end, onChange];\n};\n\nexport const Header: FC<HeaderProps> = (props: HeaderProps) => {\n    const { getData } = props;\n\n    const [placementID, setPlacementID] = useState<string>();\n    const [start, end, onChange] = useDate();\n\n    return <>dddd</>\n};\n")])])]),t("h3",{attrs:{id:"推荐遵守-的类型公约"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#推荐遵守-的类型公约"}},[e._v("#")]),e._v(" 推荐遵守 的类型公约")]),e._v(" "),t("ul",[t("li",[t("ol",[t("li",[e._v("尽量避免重复定义")])])])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("interface User {\n    type: 'user';\n    name: string;\n    age: number;\n    occupation: string;\n}\n\ninterface Admin {\n    type: 'admin';\n    name: string;\n    age: number;\n    role: string;\n}\n\n\x3c!-- old: --\x3e\ninterface PowerUser {\n    type: 'powerUser';\n    name: string;\n    age: number;\n    role: string;\n    occupation: string;\n}\n\n\x3c!-- new --\x3e\ntype PowerUser = Omit<User, 'type'> & Omit<Admin, 'type'> & { type: 'powerUser'} \n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("\x3c!-- old: --\x3e\n\x3c!-- 函数重载 --\x3e\ninterface Example {\n    diff(one: string): number;\n    diff(one: string, two: string): number;\n    diff(one: string, two: string, three: boolean): number;\n}\n\n\x3c!-- new --\x3e\ninterface Example {\n    diff(one: string, two?: string, three?: boolean): number;\n}\n\n")])])]),t("p",[e._v("函数又默认值，可以定义为可选的")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("export const useFetchIOListResource = (props: {\n    campainID: number | string;\n    queryProps: ListQueryProps;\n    ignoreErrors?: boolean;\n    shouldAutoReload?: boolean;\n}): [boolean, ListIOResponseFromAdvertising, () => viod] => {\n    const { campainID, queryProps, ignoreErrors = false, shouldAutoReload = true } = props;\n}\n\n")])])]),t("ul",[t("li",[t("ol",{attrs:{start:"2"}},[t("li",[e._v("推荐使用 keyof 对 Object 的 key 做约束")])])])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("\x3c!-- old: --\x3e\nconst getValue = (o: object, key: string) => {\n    return o[key]\n}\n\n\x3c!-- new: --\x3e\nconst getValue = <T extends Object, K extends keyof T>(o: T, key: K): T[K] => {\n    return o[key]\n}\n\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("export function useURLQuery<T extends Record<string, string>>(\n    filters?: (keyof T)[]\n): [T, (ks: (keyof T)[]) => void] {\n    const { search: originSearch } = useLocation();\n    const [search, setSearch] = useState<string>(window.location.search);\n\n    useEffect(() => setSearch(originSearch), [originSearch]);\n\n    const queries = new URLSearchParams(search);\n    const result = Object.create(null)\n    if(filters?.length) {\n        filters.forEach((key) => {\n            result[key] = queries.get('' + key);\n        });\n    } else {\n        queries.forEach((v, k) => {\n            result[k] = v;\n        });\n    }\n\n    const currentQuery = useMemo<T>(() => result as T, [search]);\n    const deleteQueries = useCallback((keys: (keyof T)[]) => {\n            const latestQueries = new URLSearchParams(window.location.search);\n            keys?.forEach((k) => latestQueries.delete(' + k));\n            const newSearch = `?${latestQueries.toString()}`;\n            window.history.replaceState(null, null, newSearch);\n            setSearch(newSearch);\n        }, \n        [search, setSearch, window.location.search]\n    );\n\n    return [currentQuery, deleteQueries];\n}\n\ntype URLQueryCampaignPage = {\n    insertion_order_id?: string;\n    placement_id?: string;\n    pagelink_id?: string;\n    step?: StepType;\n}\n\nconst [query, deleteQueries] = useURLQuery<URLQueryCampaignPage>();\n\nconst { insertion_order_id, } = query;\n")])])]),t("ul",[t("li",[e._v("使用tuple 代替 array 来约束数组长度")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("\x3c!-- old: --\x3e\ncosnt [includeNums, excludeNums, other] = useMemo((): number[] => {\n    return [\n        innerIncAndExcItems?.includes?.filter((i) => !ROM_TYPES.includes(i.type as RON_TYPE))?.length,\n        innerIncAndExcItems?.includes?.filter((i) => !ROM_TYPES.includes(i.type as RON_TYPE))?.length,\n    ]\n}, [innerIncAndExcItems]);\n\x3c!-- 没有长度限制，other不会报错 --\x3e\n\n\n\n\x3c!-- new: --\x3e\ncosnt [includeNums, excludeNums, other] = useMemo((): [number, number] => {\n    return [\n        innerIncAndExcItems?.includes?.filter((i) => !ROM_TYPES.includes(i.type as RON_TYPE))?.length,\n        innerIncAndExcItems?.includes?.filter((i) => !ROM_TYPES.includes(i.type as RON_TYPE))?.length,\n    ]\n}, [innerIncAndExcItems]);\n")])])]),t("ul",[t("li",[e._v("如果可以，id 不要定义为 string | number")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("export interface BFInfo {\n    ioId: string;    // 不要这样 ioId: string | number;\n    bnId: number;\n    price: number;\n};\n\nexport interface IOInfo {\n    id: number;\n    info: string;\n};\n\n\nconst bfInfo = bfInfos?.find((each) => each.ioId === ioInfo.id); // 编译时就会报错了\n\n\n")])])])])}],!1,null,null,null);n.default=r.exports}}]);