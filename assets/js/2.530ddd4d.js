(window.webpackJsonp=window.webpackJsonp||[]).push([[2],{178:function(t,a,e){t.exports=e.p+"assets/img/single.4475ad42.png"},179:function(t,a,e){t.exports=e.p+"assets/img/multiProgress.021dbabb.png"},180:function(t,a,e){t.exports=e.p+"assets/img/http-tcp.56f095f5.png"},181:function(t,a,e){t.exports=e.p+"assets/img/devtool.e8fa4d09.png"},182:function(t,a,e){t.exports=e.p+"assets/img/net-board.e7e97e77.png"},183:function(t,a,e){t.exports=e.p+"assets/img/control-bar.5f2e3bfb.png"},184:function(t,a,e){t.exports=e.p+"assets/img/list.d0b34c9e.png"},185:function(t,a,e){t.exports=e.p+"assets/img/response.46762c88.png"},186:function(t,a,e){t.exports=e.p+"assets/img/http-line.a8063ef7.png"},187:function(t,a,e){t.exports=e.p+"assets/img/time.31560083.png"},188:function(t,a,e){t.exports=e.p+"assets/img/DX-20220601@2x.3ffce84e.png"},189:function(t,a,e){t.exports=e.p+"assets/img/css-fuza.c42caebb.png"},190:function(t,a,e){t.exports=e.p+"assets/img/fuza2.b8597b1e.png"},191:function(t,a,e){t.exports=e.p+"assets/img/classic.d7821bcc.png"},192:function(t,a,e){t.exports=e.p+"assets/img/interact.0ab963c3.png"},193:function(t,a,e){t.exports=e.p+"assets/img/mvc.9f6df828.png"},194:function(t,a,e){t.exports=e.p+"assets/img/service-worker.237444ff.png"},195:function(t,a,e){t.exports=e.p+"assets/img/webComponent.36824fa8.png"},196:function(t,a,e){t.exports=e.p+"assets/img/shadow-dom.826bb3bf.png"},214:function(t,a,e){"use strict";e.r(a);var v=[function(){var t=this,a=t.$createElement,v=t._self._c||a;return v("div",{staticClass:"content"},[v("h2",{attrs:{id:"chrome架构"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#chrome架构"}},[t._v("#")]),t._v(" Chrome架构")]),t._v(" "),v("h4",{attrs:{id:"仅仅打开了1个页面，为什么有4个进程？"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#仅仅打开了1个页面，为什么有4个进程？"}},[t._v("#")]),t._v(" 仅仅打开了1个页面，为什么有4个进程？")]),t._v(" "),v("h3",{attrs:{id:"先区分进程和线程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#先区分进程和线程"}},[t._v("#")]),t._v(" 先区分进程和线程")]),t._v(" "),v("p",[v("strong",[t._v("一个进程就是一个程序的运行实例")]),t._v("。详细解释就是，启动一个程序的时候，操作系统会为该程序创建一块内存，用来存放代码、运行中的数据和一个执行任务的主线程，我们把这样的一个运行环境叫进程。")]),t._v(" "),v("p",[t._v("下图， 单线程和多线程对比：\n"),v("img",{attrs:{src:e(178),alt:"devtool"}}),t._v("\n线程是不能单独存在的，它是由进程来启动和管理的。线程是依附于进程的，而进程中使用多线程并行处理能提升运算效率。")]),t._v(" "),v("h3",{attrs:{id:"进程与线程的关系"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#进程与线程的关系"}},[t._v("#")]),t._v(" 进程与线程的关系")]),t._v(" "),v("ol",[v("li",[v("p",[t._v("进程中的任意一线程执行出错，都会导致整个进程的崩溃。")])]),t._v(" "),v("li",[v("p",[t._v("线程之间共享进程中的数据。")])]),t._v(" "),v("li",[v("p",[t._v("当一个进程关闭之后，操作系统会回收进程所占用的内存。")])]),t._v(" "),v("li",[v("p",[t._v("进程之间的内容相互隔离。")])])]),t._v(" "),v("p",[t._v("使用用于进程间通信（IPC）的机制了")]),t._v(" "),v("h3",{attrs:{id:"单进程浏览器时代"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#单进程浏览器时代"}},[t._v("#")]),t._v(" 单进程浏览器时代")]),t._v(" "),v("p",[t._v("单进程浏览器是指浏览器的所有功能模块都是运行在同一个进程里，这些模块包含了网络、插件、JavaScript 运行环境、渲染引擎和页面等。")]),t._v(" "),v("h4",{attrs:{id:"问题-1：不稳定"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#问题-1：不稳定"}},[t._v("#")]),t._v(" 问题 1：不稳定")]),t._v(" "),v("p",[t._v("早期浏览器需要借助于插件来实现诸如 Web 视频、Web 游戏等各种强大的功能，一个插件的意外崩溃会引起整个浏览器的崩溃。")]),t._v(" "),v("p",[t._v("除了插件之外，渲染引擎模块也是不稳定的，通常一些复杂的 JavaScript 代码就有可能引起渲染引擎模块的崩溃。和插件一样，渲染引擎的崩溃也会导致整个浏览器的崩溃。")]),t._v(" "),v("h4",{attrs:{id:"问题-2：不流畅"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#问题-2：不流畅"}},[t._v("#")]),t._v(" 问题 2：不流畅")]),t._v(" "),v("p",[t._v("所有页面的渲染模块、JavaScript 执行环境以及插件都是运行在同一个线程中的，这就意味着同一时刻只能有一个模块可以执行。")]),t._v(" "),v("p",[t._v("除了上述脚本或者插件会让单进程浏览器变卡顿外，页面的内存泄漏也是单进程变慢的一个重要原因。通常浏览器的内核都是非常复杂的，运行一个复杂点的页面再关闭页面，会存在内存不能完全回收的情况，这样导致的问题是使用时间越长，内存占用越高，浏览器会变得越慢。")]),t._v(" "),v("h4",{attrs:{id:"问题-3：不安全"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#问题-3：不安全"}},[t._v("#")]),t._v(" 问题 3：不安全")]),t._v(" "),v("p",[t._v("可以从插件和页面脚本两个方面来解释该原因。")]),t._v(" "),v("p",[t._v("插件可以使用 C/C++ 等代码编写，通过插件可以获取到操作系统的任意资源，当你在页面运行一个插件时也就意味着这个插件能完全操作你的电脑。如果是个恶意插件，那么它就可以释放病毒、窃取你的账号密码，引发安全性问题。")]),t._v(" "),v("p",[t._v("至于页面脚本，它可以通过浏览器的漏洞来获取系统权限，这些脚本获取系统权限之后也可以对你的电脑做一些恶意的事情，同样也会引发安全问题。")]),t._v(" "),v("p",[t._v("你可以想象一下这样的场景：当你正在用浏览器打开多个页面时，突然某个页面崩溃了或者失去响应，随之而来的是整个浏览器的崩溃或者无响应，然后你发现你给老板写的邮件页面也随之消失了，这时你的心情会不会和页面一样崩溃呢？")]),t._v(" "),v("h3",{attrs:{id:"多进程浏览器时代"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#多进程浏览器时代"}},[t._v("#")]),t._v(" 多进程浏览器时代")]),t._v(" "),v("p",[v("strong",[t._v("我们先看看如何解决不稳定的问题")]),t._v("。 由于进程是相互隔离的，所以当一个页面或者插件崩溃时，影响到的仅仅是当前的页面进程或者插件进程，并不会影响到浏览器和其他页面，这就完美地解决了页面或者插件的崩溃会导致整个浏览器崩溃，也就是不稳定的问题。")]),t._v(" "),v("p",[v("strong",[t._v("接下来再来看看不流畅的问题是如何解决的。")]),t._v(" 同样，JavaScript 也是运行在渲染进程中的，所以即使 JavaScript 阻塞了渲染进程，影响到的也只是当前的渲染页面，而并不会影响浏览器和其他页面，因为其他页面的脚本是运行在它们自己的渲染进程中的。所以当我们再在 Chrome 中运行上面那个死循环的脚本时，没有响应的仅仅是当前的页面。")]),t._v(" "),v("p",[v("strong",[t._v("对于内存泄漏的解决方法那就更简单了")]),t._v("，因为当关闭一个页面时，整个渲染进程也会被关闭，之后该进程所占用的内存都会被系统回收，这样就轻松解决了浏览器页面的内存泄漏问题。")]),t._v(" "),v("p",[v("strong",[t._v("最后我们再来看看上面的两个安全问题是怎么解决的")]),t._v("。采用多进程架构的额外好处是可以使用安全沙箱，你可以把沙箱看成是操作系统给进程上了一把锁，沙箱里面的程序可以运行，但是不能在你的硬盘上写入任何数据，也不能在敏感位置读取任何数据，例如你的文档和桌面。Chrome 把插件进程和渲染进程锁在沙箱里面，这样即使在渲染进程或者插件进程里面执行了恶意程序，恶意程序也无法突破沙箱去获取系统权限。")]),t._v(" "),v("h3",{attrs:{id:"目前多进程架构"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#目前多进程架构"}},[t._v("#")]),t._v(" 目前多进程架构")]),t._v(" "),v("p",[v("img",{attrs:{src:e(179),alt:"multiProgress"}})]),t._v(" "),v("p",[t._v("从图中可以看出，最新的 Chrome 浏览器包括：1 个浏览器（Browser）主进程、1 个 GPU 进程、1 个网络（NetWork）进程、多个渲染进程和多个插件进程。")]),t._v(" "),v("h4",{attrs:{id:"这几个进程的功能"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#这几个进程的功能"}},[t._v("#")]),t._v(" 这几个进程的功能")]),t._v(" "),v("ul",[v("li",[v("p",[v("strong",[t._v("浏览器进程")]),t._v("。主要负责界面显示、用户交互、子进程管理，同时提供存储等功能。")])]),t._v(" "),v("li",[v("p",[v("strong",[t._v("渲染进程")]),t._v("。核心任务是将 HTML、CSS 和 JavaScript 转换为用户可以与之交互的网页，排版引擎 Blink 和 JavaScript 引擎 V8 都是运行在该进程中，默认情况下，Chrome 会为每个 Tab 标签创建一个渲染进程。出于安全考虑，渲染进程都是运行在沙箱模式下。")])]),t._v(" "),v("li",[v("p",[v("strong",[t._v("GPU 进程")]),t._v("。其实，Chrome 刚开始发布的时候是没有 GPU 进程的。而 GPU 的使用初衷是为了实现 3D CSS 的效果，只是随后网页、Chrome 的 UI 界面都选择采用 GPU 来绘制，这使得 GPU 成为浏览器普遍的需求。最后，Chrome 在其多进程架构上也引入了 GPU 进程。")])]),t._v(" "),v("li",[v("p",[v("strong",[t._v("网络进程")]),t._v("。主要负责页面的网络资源加载，之前是作为一个模块运行在浏览器进程里面的，直至最近才独立出来，成为一个单独的进程。")])]),t._v(" "),v("li",[v("p",[v("strong",[t._v("插件进程")]),t._v("。主要是负责插件的运行，因插件易崩溃，所以需要通过插件进程来隔离，以保证插件进程崩溃不会对浏览器和页面造成影响。")])])]),t._v(" "),v("h4",{attrs:{id:"不过凡事都有两面性，虽然多进程模型提升了浏览器的稳定性、流畅性和安全性，但同样不可避免地带来了一些问题："}},[v("a",{staticClass:"header-anchor",attrs:{href:"#不过凡事都有两面性，虽然多进程模型提升了浏览器的稳定性、流畅性和安全性，但同样不可避免地带来了一些问题："}},[t._v("#")]),t._v(" 不过凡事都有两面性，虽然多进程模型提升了浏览器的稳定性、流畅性和安全性，但同样不可避免地带来了一些问题：")]),t._v(" "),v("p",[v("strong",[t._v("更高的资源占用")]),t._v("。因为每个进程都会包含公共基础结构的副本（如 JavaScript 运行环境），这就意味着浏览器会消耗更多的内存资源。")]),t._v(" "),v("p",[v("strong",[t._v("更复杂的体系架构")]),t._v("。浏览器各模块之间耦合性高、扩展性差等问题，会导致现在的架构已经很难适应新的需求了")]),t._v(" "),v("h2",{attrs:{id:"http请求流程：为什么很多站点第二次打开速度会很快？"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#http请求流程：为什么很多站点第二次打开速度会很快？"}},[t._v("#")]),t._v(" HTTP请求流程：为什么很多站点第二次打开速度会很快？")]),t._v(" "),v("p",[t._v("HTTP 是一种允许浏览器向服务器获取资源的协议，是 Web 的基础。")]),t._v(" "),v("h3",{attrs:{id:"浏览器端发起-http-请求流程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#浏览器端发起-http-请求流程"}},[t._v("#")]),t._v(" 浏览器端发起 HTTP 请求流程")]),t._v(" "),v("ol",[v("li",[t._v("构建请求")])]),t._v(" "),v("p",[t._v("首先，浏览器构建"),v("strong",[t._v("请求行")]),t._v("信息（如下所示），构建好后，浏览器准备发起网络请求。")]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v("GET /index.html HTTP1.1\n")])])]),v("ol",{attrs:{start:"2"}},[v("li",[t._v("查找缓存")])]),t._v(" "),v("p",[t._v("在真正发起网络请求之前，浏览器会先在浏览器缓存中查询是否有要请求的文件。其中，"),v("strong",[t._v("浏览器缓存是一种在本地保存资源副本，以供下次请求时直接使用的技术")]),t._v("。")]),t._v(" "),v("p",[t._v("当浏览器发现请求的资源已经在浏览器缓存中存有副本，它会拦截请求，返回该资源的副本，并直接结束请求，而不会再去源服务器重新下载。这样做的好处有：")]),t._v(" "),v("ul",[v("li",[t._v("缓解服务器端压力，提升性能（获取资源的耗时更短了）；")]),t._v(" "),v("li",[t._v("对于网站来说，缓存是实现快速资源加载的重要组成部分。")])]),t._v(" "),v("p",[t._v("当然，如果缓存查找失败，就会进入网络请求过程了。")]),t._v(" "),v("ol",{attrs:{start:"3"}},[v("li",[t._v("准备 IP 地址和端口")])]),t._v(" "),v("p",[t._v("不过，先不急，在了解网络请求之前，我们需要先看看 HTTP 和 TCP 的关系。因为浏览器使用 "),v("strong",[t._v("HTTP 协议作为应用层协议")]),t._v("，用来封装请求的文本信息；并使用 "),v("strong",[t._v("TCP/IP 作传输层协议")]),t._v("将它发到网络上，所以在 HTTP 工作开始之前，浏览器需要通过 TCP 与服务器建立连接。也就是说 "),v("strong",[t._v("HTTP 的内容是通过 TCP 的传输数据阶段来实现的")]),t._v("，你可以结合下图更好地理解这二者的关系。\n"),v("img",{attrs:{src:e(180),alt:"http-tcp"}})]),t._v(" "),v("h2",{attrs:{id:"chrome开发者工具-性能分析"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#chrome开发者工具-性能分析"}},[t._v("#")]),t._v(" Chrome开发者工具(性能分析)")]),t._v(" "),v("p",[t._v("Chrome 开发者工具有很多重要的面板，比如与性能相关的有网络面板、Performance 面板、内存面板等，与调试页面相关的有 Elements 面板、Sources 面板、Console 面板等。它一共包含了 10 个功能面板，包括了 Elements、Console、Sources、NetWork、Performance、Memory、Application、Security、Audits 和 Layers。\n"),v("img",{attrs:{src:e(181),alt:"devtool"}})]),t._v(" "),v("h3",{attrs:{id:"网络面板"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#网络面板"}},[t._v("#")]),t._v(" 网络面板")]),t._v(" "),v("p",[t._v("网络面板由控制器、过滤器、抓图信息、时间线、详细列表和下载信息概要这 6 个区域构成（如下图所示）。\n"),v("img",{attrs:{src:e(182),alt:"netBoard"}}),t._v(" "),v("strong",[t._v("1. 控制器")]),t._v(" "),v("img",{attrs:{src:e(183),alt:"control-bar"}})]),t._v(" "),v("ul",[v("li",[t._v("红色圆点的按钮，表示“开始 / 暂停抓包”，这个功能很常见，很容易理解。")]),t._v(" "),v("li",[t._v("“全局搜索”按钮，这个功能就非常重要了，可以在所有下载资源中搜索相关内容，还可以快速定位到某几个你想要的文件上。")]),t._v(" "),v("li",[t._v("Disable cache，即“禁止从 Cache 中加载资源”的功能，它在调试 Web 应用的时候非常有用，因为开启了 Cache 会影响到网络性能测试的结果。")]),t._v(" "),v("li",[t._v("Online 按钮，是“模拟 2G/3G”功能，它可以限制带宽，模拟弱网情况下页面的展现情况，然后你就可以根据实际展示情况来动态调整策略，以便让 Web 应用更加适用于这些弱网。")])]),t._v(" "),v("p",[v("strong",[t._v("2. 过滤器")]),v("br"),t._v("\n网络面板中的过滤器，主要就是起过滤功能。因为有时候一个页面有太多内容在详细列表区域中展示了，而你可能只想查看 JavaScript 文件或者 CSS 文件，这时候就可以通过过滤器模块来筛选你想要的文件类型。")]),t._v(" "),v("p",[v("strong",[t._v("3. 抓图信息")]),v("br"),t._v("\n抓图信息区域，可以用来分析用户等待页面加载时间内所看到的内容，分析用户实际的体验情况。比如，如果页面加载 1 秒多之后屏幕截图还是白屏状态，这时候就需要分析是网络还是代码的问题了。（勾选面板上的“Capture screenshots”即可启用屏幕截图。）")]),t._v(" "),v("p",[v("strong",[t._v("4. 时间线")]),v("br"),t._v("\n时间线，主要用来展示 HTTP、HTTPS、WebSocket 加载的状态和时间的一个关系，用于直观感受页面的加载过程。如果是多条竖线堆叠在一起，那说明这些资源被同时被加载。至于具体到每个文件的加载信息，还需要用到下面要讲的详细列表。")]),t._v(" "),v("p",[v("strong",[t._v("5. 详细列表")]),v("br"),t._v("\n这个区域是最重要的，它详细记录了每个资源从发起请求到完成请求这中间所有过程的状态，以及最终请求完成的数据信息。通过该列表，你就能很容易地去诊断一些网络问题。")]),t._v(" "),v("p",[v("strong",[t._v("5.1 列表的属性")]),v("br"),t._v(" "),v("img",{attrs:{src:e(184),alt:"netBoard"}})]),t._v(" "),v("p",[v("strong",[t._v("5.2 详细信息")]),v("br"),t._v(" "),v("img",{attrs:{src:e(185),alt:"netBoard"}})]),t._v(" "),v("p",[v("strong",[t._v("5.3 单个资源的时间线")]),v("br"),t._v("\nHTTP 请求流程\n"),v("img",{attrs:{src:e(186),alt:"netBoard"}})]),t._v(" "),v("p",[t._v("那详细列表中是如何表示出这个流程的呢？这就要重点看下时间线面板了：")]),t._v(" "),v("p",[v("img",{attrs:{src:e(187),alt:"netBoard"}})]),t._v(" "),v("p",[t._v("那面板中这各项到底是什么含义呢？")]),t._v(" "),v("p",[t._v("第一个是 Queuing，也就是排队的意思，当浏览器发起一个请求的时候，会有很多原因导致该请求不能被立即执行，而是需要排队等待。导致请求处于排队状态的原因有很多。")]),t._v(" "),v("ul",[v("li",[t._v("首先，页面中的资源是有优先级的，比如 CSS、HTML、JavaScript 等都是页面中的核心文件，所以优先级最高；而图片、视频、音频这类资源就不是核心资源，优先级就比较低。通常当后者遇到前者时，就需要“让路”，进入待排队状态。")]),t._v(" "),v("li",[t._v("其次，我们前面也提到过，浏览器会为每个域名最多维护 6 个 TCP 连接，如果发起一个 HTTP 请求时，这 6 个 TCP 连接都处于忙碌状态，那么这个请求就会处于排队状态。")]),t._v(" "),v("li",[t._v("最后，网络进程在为数据分配磁盘空间时，新的 HTTP 请求也需要短暂地等待磁盘分配结束。")])]),t._v(" "),v("p",[t._v("等待排队完成之后，就要进入发起连接的状态了。不过在发起连接之前，还有一些原因可能导致连接过程被推迟，这个推迟就表现在面板中的 Stalled 上，它表示停滞的意思。")]),t._v(" "),v("p",[v("strong",[t._v("这里需要额外说明的是")]),t._v("，如果你使用了代理服务器，还会增加一个 Proxy Negotiation 阶段，也就是代理协商阶段，它表示代理服务器连接协商所用的时间，不过在上图中没有体现出来，因为这里我们没有使用代理服务器。")]),t._v(" "),v("p",[t._v("接下来，就到了 "),v("strong",[t._v("Initial connection/SSL 阶段")]),t._v("了，也就是和服务器建立连接的阶段，这包括了建立 TCP 连接所花费的时间；不过如果你使用了 HTTPS 协议，那么还需要一个额外的 SSL 握手时间，这个过程主要是用来协商一些加密信息的。（关于 SSL 协商的详细过程，我们会在 Web 安全模块中介绍。）")]),t._v(" "),v("p",[t._v("和服务器建立好连接之后，网络进程会准备请求数据，并将其发送给网络，这就是 "),v("strong",[t._v("Request sent 阶段")]),t._v("。通常这个阶段非常快，因为只需要把浏览器缓冲区的数据发送出去就结束了，并不需要判断服务器是否接收到了，所以这个时间通常不到 1 毫秒。")]),t._v(" "),v("p",[t._v("数据发送出去了，接下来就是等待接收服务器第一个字节的数据，这个阶段称为 Waiting (TTFB)，通常也称为“"),v("strong",[t._v("第一字节时间")]),t._v("”。 TTFB 是反映服务端响应速度的重要指标，对服务器来说，TTFB 时间越短，就说明服务器响应越快。")]),t._v(" "),v("p",[t._v("接收到第一个字节之后，进入陆续接收完整数据的阶段，也就是 "),v("strong",[t._v("Content Download 阶段")]),t._v("，这意味着从第一字节时间到接收到全部响应数据所用的时间。")]),t._v(" "),v("h3",{attrs:{id:"优化时间线上耗时项"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#优化时间线上耗时项"}},[t._v("#")]),t._v(" 优化时间线上耗时项")]),t._v(" "),v("h5",{attrs:{id:"_1-排队（queuing）时间过久"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-排队（queuing）时间过久"}},[t._v("#")]),t._v(" 1. 排队（Queuing）时间过久")]),t._v(" "),v("blockquote",[v("p",[t._v("排队时间过久，大概率是由浏览器为每个域名最多维护 6 个连接导致的。那么基于这个原因，你就可以让 1 个站点下面的资源放在多个域名下面，比如放到 3 个域名下面，这样就可以同时支持 18 个连接了，这种方案称为"),v("strong",[t._v("域名分片")]),t._v("技术。除了域名分片技术外，我个人还建议你"),v("strong",[t._v("把站点升级到 HTTP2")]),t._v("，因为 HTTP2 已经没有每个域名最多维护 6 个 TCP 连接的限制了。")])]),t._v(" "),v("h5",{attrs:{id:"_2-第一字节时间（ttfb）时间过久"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-第一字节时间（ttfb）时间过久"}},[t._v("#")]),t._v(" 2. 第一字节时间（TTFB）时间过久")]),t._v(" "),v("ul",[v("li",[v("p",[v("strong",[t._v("服务器生成页面数据的时间过久")]),t._v("。对于动态网页来说，服务器收到用户打开一个页面的请求时，首先要从数据库中读取该页面需要的数据，然后把这些数据传入到模板中，模板渲染后，再返回给用户。服务器在处理这个数据的过程中，可能某个环节会出问题。")])]),t._v(" "),v("li",[v("p",[v("strong",[t._v("网络的原因")]),t._v("。比如使用了低带宽的服务器，或者本来用的是电信的服务器，可联通的网络用户要来访问你的服务器，这样也会拖慢网速。")])]),t._v(" "),v("li",[v("p",[v("strong",[t._v("发送请求头时带上了多余的用户信息")]),t._v("。比如一些不必要的 Cookie 信息，服务器接收到这些 Cookie 信息之后可能需要对每一项都做处理，这样就加大了服务器的处理时长。")])])]),t._v(" "),v("p",[t._v("对于这三种问题，你要有针对性地出一些解决方案。面对第一种服务器的问题，你可以想办法去提高服务器的处理速度，比如通过增加各种缓存的技术；针对第二种网络问题，你可以使用 CDN 来缓存一些静态文件；至于第三种，你在发送请求时就去尽可能地减少一些不必要的 Cookie 数据信息。")]),t._v(" "),v("h5",{attrs:{id:"_3-content-download-时间过久"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-content-download-时间过久"}},[t._v("#")]),t._v(" 3. Content Download 时间过久")]),t._v(" "),v("p",[t._v("如果单个请求的 Content Download 花费了大量时间，有可能是字节数太多的原因导致的。这时候你就需要减少文件大小，比如压缩、去掉源码中不必要的注释等方法。")]),t._v(" "),v("p",[v("strong",[t._v("6. 下载信息概要")]),t._v("\n下载信息概要中，你要重点关注下 DOMContentLoaded 和 Load 两个事件，以及这两个事件的完成时间。")]),t._v(" "),v("ul",[v("li",[t._v("DOMContentLoaded，这个事件发生后，说明页面已经构建好 DOM 了，这意味着构建 DOM 所需要的 HTML 文件、JavaScript 文件、CSS 文件都已经下载完成了。")]),t._v(" "),v("li",[t._v("Load，说明浏览器已经加载了所有的资源（图像、样式表等）。")])]),t._v(" "),v("p",[t._v("通过下载信息概要面板，你可以查看触发这两个事件所花费的时间。")]),t._v(" "),v("h3",{attrs:{id:"渲染总体过程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#渲染总体过程"}},[t._v("#")]),t._v(" 渲染总体过程")]),t._v(" "),v("p",[t._v("流水线可分为如下几个子阶段："),v("strong",[t._v("构建 DOM 树、样式计算、布局阶段、分层、绘制、分块、光栅化和合成")])]),t._v(" "),v("h2",{attrs:{id:"javascript-是如何影响-dom-树构建的"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#javascript-是如何影响-dom-树构建的"}},[t._v("#")]),t._v(" Javascript 是如何影响 DOM 树构建的")]),t._v(" "),v("h3",{attrs:{id:"dom-树"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#dom-树"}},[t._v("#")]),t._v(" DOM 树")]),t._v(" "),v("p",[t._v("从网络传给渲染引擎的HTML文件字节流是无法被渲染引擎理解的，需要转换成渲染引擎可以理解的内部结构，这就是DOM树，DOM树提供了对HTML文档结构化的理解；有三个层面的作用：")]),t._v(" "),v("ul",[v("li",[t._v("从视觉的角度看，DOM是生成页面的基础数据结构；")]),t._v(" "),v("li",[t._v("从Javascript 角度看，DOM 提供了 javacript脚本操作的接口， 可以访问，修改DOM，从而改变文档结构；")]),t._v(" "),v("li",[t._v("从安全的角度看，DOM 是一道安全防护线，一些不安全的内容会在DOM 解析阶段就被举止门外")])]),t._v(" "),v("h3",{attrs:{id:"dom-树生成"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#dom-树生成"}},[t._v("#")]),t._v(" DOM 树生成")]),t._v(" "),v("p",[t._v("在渲染引擎内部有一个HTML 解析器（HTML parse）； 将HTML字节流转化成DOM树。"),v("br"),t._v("\n那么HTML 解析器是在文档全部加载完再解析呢，还是边加载边解析？"),v("br"),t._v("\n答案是加载多少文档就解析多少DOM树。网络进程和渲染进程会形成数据共享的管道，网络进程接收到数据后就往这个管道里放，而另一端，渲染进程会将接收到的字节流 “喂给” HTML 解析器，\nHTML 解析器动态的将HTML字节流解析成 DOM；")]),t._v(" "),v("h3",{attrs:{id:"javascript-是如何影响-dom-生成的"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#javascript-是如何影响-dom-生成的"}},[t._v("#")]),t._v(" JavaScript 是如何影响 DOM 生成的")]),t._v(" "),v("h5",{attrs:{id:"情况一："}},[v("a",{staticClass:"header-anchor",attrs:{href:"#情况一："}},[t._v("#")]),t._v(" 情况一：")]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v("<html>\n<body>\n    <div>1</div>\n    <script>\n    let div1 = document.getElementsByTagName('div')[0]\n    div1.innerText = 'time.geekbang'\n    <\/script>\n    <div>test</div>\n</body>\n</html>\n")])])]),v("p",[t._v("解析到 script 标签，渲染引擎判断这是一段脚本，就会暂停 DOM 解析，因为接下来 javascript 有可能会影响当前已经生成 DOM 结构了；javascript 引擎介入，执行script标签中的脚本；\n执行完后，HTML 解析器继续解析DOM，直到完成。")]),t._v(" "),v("h5",{attrs:{id:"情况二："}},[v("a",{staticClass:"header-anchor",attrs:{href:"#情况二："}},[t._v("#")]),t._v(" 情况二：")]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v("//foo.js\nlet div1 = document.getElementsByTagName('div')[0]\ndiv1.innerText = 'time.geekbang'\n")])])]),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v("<html>\n<body>\n    <div>1</div>\n    <script type=\"text/javascript\" src='foo.js'><\/script>\n    <div>test</div>\n</body>\n</html>\n")])])]),v("p",[t._v("如上面这种，内嵌脚本改成外部引入脚本，DOM解析暂停，不过需要注意的是这里有个下载文件的过程，下载会阻塞DOM解析；网络，文件大小等都会影响下载过程；\n不过Chrome 浏览器做了很多优化，其中一个主要的优化是预解析操作，渲染引擎收到字节流之后，会开启一个预解析线程，用来分析HTML中的JS文件，CSS文件等，如果有，预解析线程提前下载文件。")]),t._v(" "),v("h6",{attrs:{id:"优化办法："}},[v("a",{staticClass:"header-anchor",attrs:{href:"#优化办法："}},[t._v("#")]),t._v(" 优化办法：")]),t._v(" "),v("ol",[v("li",[t._v("CDN 来加速javascript 文件的加载")]),t._v(" "),v("li",[t._v("压缩文件体积")]),t._v(" "),v("li",[t._v("如果文件没有 DOM 操作，就可以将javascript 文件设置为一步加载， 通过 async 或 defer 来标记代码")])]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v(" <script async type=\"text/javascript\" src='foo.js'><\/script>\n\n<script defer type=\"text/javascript\" src='foo.js'><\/script>\n")])])]),v("h5",{attrs:{id:"async-和-defer-的区别："}},[v("a",{staticClass:"header-anchor",attrs:{href:"#async-和-defer-的区别："}},[t._v("#")]),t._v(" async 和 defer 的区别：")]),t._v(" "),v("p",[t._v("虽然都是异步的，async标志的脚本一旦加载完就执行，defer标记的脚本，需要在 DOMContentLoaded 事件之前执行， async会阻塞DOM解析，defer不会阻塞")]),t._v(" "),v("h2",{attrs:{id:"css如何影响首次加载时的白屏时间？"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#css如何影响首次加载时的白屏时间？"}},[t._v("#")]),t._v(" CSS如何影响首次加载时的白屏时间？")]),t._v(" "),v("h3",{attrs:{id:"最简单的"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#最简单的"}},[t._v("#")]),t._v(" 最简单的")]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v("//theme.css\ndiv{ \n    color : coral;\n    background-color:black\n}\n")])])]),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v('<html>\n<head>\n    <link href="theme.css" rel="stylesheet">\n</head>\n<body>\n    <div>geekbang com</div>\n</body>\n</html>\n')])])]),v("p",[v("img",{attrs:{src:e(188),alt:"template"}})]),t._v(" "),v("h3",{attrs:{id:"稍微复杂一点的"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#稍微复杂一点的"}},[t._v("#")]),t._v(" 稍微复杂一点的")]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v("//theme.css\ndiv{ \n    color : coral;\n    background-color:black\n}\n")])])]),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v('<html>\n<head>\n    <link href="theme.css" rel="stylesheet">\n</head>\n<body>\n    <div>geekbang com</div>\n    <script>\n        console.log(\'time.geekbang.org\')\n    <\/script>\n    <div>geekbang com</div>\n</body>\n</html>\n')])])]),v("p",[v("img",{attrs:{src:e(189),alt:"template"}})]),t._v(" "),v("h3",{attrs:{id:"再复杂一点的"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#再复杂一点的"}},[t._v("#")]),t._v(" 再复杂一点的")]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v("//theme.css\ndiv{ \n    color : coral;\n    background-color:black\n}\n")])])]),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v("//foo.js\nconsole.log('time.geekbang.org')\n")])])]),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v('<html>\n<head>\n    <link href="theme.css" rel="stylesheet">\n</head>\n<body>\n    <div>geekbang com</div>\n    <script src=\'foo.js\'><\/script>\n    <div>geekbang com</div>\n</body>\n</html>\n')])])]),v("p",[v("img",{attrs:{src:e(190),alt:"template"}})]),t._v(" "),v("h5",{attrs:{id:"通常情况下的瓶颈主要体现在下载-css-文件、下载-javascript-文件和执行-javascript。"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#通常情况下的瓶颈主要体现在下载-css-文件、下载-javascript-文件和执行-javascript。"}},[t._v("#")]),t._v(" 通常情况下的瓶颈主要体现在下载 CSS 文件、下载 JavaScript 文件和执行 JavaScript。")]),t._v(" "),v("ul",[v("li",[t._v("通过内联 JavaScript、内联 CSS 来移除这两种类型的文件下载，这样获取到 HTML 文件之后就可以直接开始渲染流程了。")]),t._v(" "),v("li",[t._v("但并不是所有的场合都适合内联，那么还可以尽量减少文件大小，比如通过 webpack 等工具移除一些不必要的注释，并压缩 JavaScript 文件。")]),t._v(" "),v("li",[t._v("还可以将一些不需要在解析 HTML 阶段使用的 JavaScript 标记上 async 或者 defer。")]),t._v(" "),v("li",[t._v("对于大的 CSS 文件，可以通过媒体查询属性，将其拆分为多个不同用途的 CSS 文件，这样只有在特定的场景下才会加载特定的 CSS 文件。")])]),t._v(" "),v("h2",{attrs:{id:"为什么css-动画比-javascript-高效"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#为什么css-动画比-javascript-高效"}},[t._v("#")]),t._v(" 为什么CSS 动画比 Javascript 高效")]),t._v(" "),v("p",[t._v("每个显示器都有固定的刷新频率，通常是 60HZ，也就是每秒更新 60 张图片；DOM树生成之后，我们还经历布局、分层、绘制、合成、显示等阶段后才能显示出漂亮的页面。")]),t._v(" "),v("h5",{attrs:{id:"任何一桢的生成方式有，重排、重绘和合成三种"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#任何一桢的生成方式有，重排、重绘和合成三种"}},[t._v("#")]),t._v(" 任何一桢的生成方式有，重排、重绘和合成三种")]),t._v(" "),v("p",[t._v("这三种方式的渲染路径是不同的，通常渲染路径越长，生成图像花费的时间就越多。比如重排，它需要重新根据 CSSOM 和 DOM 来计算布局树，这样生成一幅图片时，会让整个渲染流水线的每个阶段都执行一遍，如果布局复杂的话，就很难保证渲染的效率了。而重绘因为没有了重新布局的阶段，操作效率稍微高点，但是依然需要重新计算绘制信息，并触发绘制操作之后的一系列操作。")]),t._v(" "),v("p",[t._v("相较于重排和重绘合成操作的路径就显得非常短了，并不需要触发布局和绘制两个阶段，如果采用了 GPU，那么合成的效率会非常高。推荐合成方式优先")]),t._v(" "),v("h5",{attrs:{id:"chrome-中的合成技术，可以用三个词来概括总结：分层、分块和合成。"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#chrome-中的合成技术，可以用三个词来概括总结：分层、分块和合成。"}},[t._v("#")]),t._v(" Chrome 中的合成技术，可以用三个词来概括总结：分层、分块和合成。")]),t._v(" "),v("p",[t._v("在 Chrome 的渲染流水线中，分层体现在生成布局树之后,渲染引擎会根据布局树的特点将其转换为层树（Layer Tree），层树是渲染流水线后续流程的基础结构。")]),t._v(" "),v("p",[t._v("绘制阶段其实并不是真正地绘出图片，而是将绘制指令组合成一个列表，比如一个图层要设置的背景为黑色，并且还要在中间画一个圆形，那么绘制过程会生成|Paint BackGroundColor:Black | Paint Circle|这样的绘制指令列表，绘制过程就完成了。")]),t._v(" "),v("p",[t._v("有了绘制列表之后，就需要进入光栅化阶段了，光栅化就是按照绘制列表中的指令生成图片。每一个图层都对应一张图片，合成线程有了这些图片之后，会将这些图片合成为“一张”图片，并最终将生成的图片发送到后缓冲区。这就是一个大致的分层、合成流程。")]),t._v(" "),v("p",[t._v("需要重点关注的是，合成操作是在合成线程上完成的，这也就意味着在执行合成操作时，是不会影响到主线程执行的。这就是为什么经常主线程卡住了，但是 CSS 动画依然能执行的原因。")]),t._v(" "),v("p",[t._v("Chrome 又采取了一个策略：在首次合成图块的时候使用一个低分辨率的图片")]),t._v(" "),v("h3",{attrs:{id:"如何利用分层技术优化代码"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#如何利用分层技术优化代码"}},[t._v("#")]),t._v(" 如何利用分层技术优化代码")]),t._v(" "),v("p",[t._v("如果使用 JavaScript 来写这些效果，会牵涉到整个渲染流水线，所以 JavaScript 的绘制效率会非常低下。")]),t._v(" "),v("p",[t._v("这时你可以使用 will-change 来告诉渲染引擎你会对该元素做一些特效变换，CSS 代码如下：")]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v(".box {\nwill-change: transform, opacity;\n}\n")])])]),v("p",[t._v("这段代码就是提前告诉渲染引擎 box 元素将要做几何变换和透明度变换操作，这时候渲染引擎会将该元素单独实现一层，等这些变换发生时，渲染引擎会通过合成线程直接去处理变换，这些变换并没有涉及到主线程，这样就大大提升了渲染的效率。这也是 CSS 动画比 JavaScript 动画高效的原因。")]),t._v(" "),v("h4",{attrs:{id:"注意："}},[v("a",{staticClass:"header-anchor",attrs:{href:"#注意："}},[t._v("#")]),t._v(" 注意：")]),t._v(" "),v("p",[t._v("不是所有的CSS动画都高效， 记能直接在合成线程中完成的任务都 "),v("strong",[t._v("不会  改变图层的内容")]),t._v("，如文字信息的改变，布局的改变，颜色的改变，统统不会涉及，涉及到这些内容的变化就要牵涉到重排或者重绘了。")]),t._v(" "),v("p",[t._v("能直接在合成线程中实现的是整个图层的几何变换，透明度变换，阴影等，这些变换都不会影响到图层的内容。")]),t._v(" "),v("h2",{attrs:{id:"如何系统的优化页面"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#如何系统的优化页面"}},[t._v("#")]),t._v(" 如何系统的优化页面")]),t._v(" "),v("p",[t._v("就是让页面更快地显示和响应。")]),t._v(" "),v("h5",{attrs:{id:"通常一个页面有三个阶段：加载阶段、交互阶段和关闭阶段。"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#通常一个页面有三个阶段：加载阶段、交互阶段和关闭阶段。"}},[t._v("#")]),t._v(" 通常一个页面有三个阶段：加载阶段、交互阶段和关闭阶段。")]),t._v(" "),v("ul",[v("li",[t._v("加载阶段，是指从发出请求到渲染出完整页面的过程，影响到这个阶段的主要因素有网络和 JavaScript 脚本。")]),t._v(" "),v("li",[t._v("交互阶段，主要是从页面加载完成到用户交互的整合过程，影响到这个阶段的主要因素是 JavaScript 脚本。")]),t._v(" "),v("li",[t._v("关闭阶段，主要是用户发出关闭指令后页面所做的一些清理操作。")])]),t._v(" "),v("h3",{attrs:{id:"典型的加载阶段渲染流水线"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#典型的加载阶段渲染流水线"}},[t._v("#")]),t._v(" 典型的加载阶段渲染流水线:")]),t._v(" "),v("p",[v("img",{attrs:{src:e(191),alt:"template"}})]),t._v(" "),v("p",[t._v("并非所有的资源都会阻塞页面的首次绘制，比如图片、音频、视频等文件就不会阻塞页面的首次渲染；而 JavaScript、首次请求的 HTML 资源文件、CSS 文件是会阻塞首次渲染的，因为在构建 DOM 的过程中需要 HTML 和 JavaScript 文件，在构造渲染树的过程中需要用到 CSS 文件。")]),t._v(" "),v("h3",{attrs:{id:"影响页面首次渲染的核心因素"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#影响页面首次渲染的核心因素"}},[t._v("#")]),t._v(" 影响页面首次渲染的核心因素")]),t._v(" "),v("p",[t._v("我们把这些能阻塞网页首次渲染的资源称为"),v("strong",[t._v("关键资源")]),t._v("。基于关键资源，我们可以继续细化出来三个影响页面首次渲染的核心因素。")]),t._v(" "),v("ol",[v("li",[v("strong",[t._v("第一个是关键资源个数")]),t._v("。")]),t._v(" "),v("li",[v("strong",[t._v("第二个是关键资源大小")]),t._v(".")]),t._v(" "),v("li",[v("strong",[t._v("第三个是请求关键资源需要多少个 RTT（Round Trip Time）")])])]),t._v(" "),v("blockquote",[v("p",[v("strong",[t._v("RTT:")]),t._v("\n当使用 TCP 协议传输一个文件时，比如这个文件大小是 0.1M，由于 TCP 的特性，这个数据并不是一次传输到服务端的，而是需要拆分成一个个数据包来回多次进行传输的。RTT 就是这里的往返时延。它是网络中一个重要的性能指> 标，表示从发送端发送数据开始，到发送端收到来自接收端的确认，总共经历的时延。通常 1 个 HTTP 的数据包在 14KB 左右，所以 1 个 0.1M 的页面就需要拆分成 8 个包来传输了，也就是说需要 8 个 RTT。")])]),t._v(" "),v("p",[t._v("由于渲染引擎有一个预解析的线程，在接收到 HTML 数据之后，预解析线程会快速扫描 HTML 数据中的关键资源，一旦扫描到了，会立马发起请求，你可以认为 JavaScript 和 CSS 是同时发起请求的，所以它们的请求是重叠的，那么计算它们的 RTT 时，只需要计算体积最大的那个数据就可以了。")]),t._v(" "),v("p",[t._v("从上面的三个影响页面渲染方面，总结解决方法。")]),t._v(" "),v("h3",{attrs:{id:"如何减少关键资源的个数？"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#如何减少关键资源的个数？"}},[t._v("#")]),t._v(" 如何减少关键资源的个数？")]),t._v(" "),v("ol",[v("li",[t._v("一种方式是可以将 JavaScript 和 CSS 改成内联的形式。")]),t._v(" "),v("li",[t._v("如果 JavaScript 代码没有 DOM 或者 CSSOM 的操作，则可以改成 async 或者 defer 属性,变成非关键资源。")]),t._v(" "),v("li",[t._v("对于 CSS，如果不是在构建页面之前加载的，则可以添加媒体取消阻止显现的标志,变成非关键资源。")])]),t._v(" "),v("blockquote",[v("p",[t._v("给 link 标签添加 media=“none” onload=“this.media=‘all’”")])]),t._v(" "),v("h3",{attrs:{id:"如何减少关键资源的大小？"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#如何减少关键资源的大小？"}},[t._v("#")]),t._v(" 如何减少关键资源的大小？")]),t._v(" "),v("ol",[v("li",[t._v("可以压缩 CSS 和 JavaScript 资源。")]),t._v(" "),v("li",[t._v("移除 HTML、CSS、JavaScript 文件中一些注释内容。")]),t._v(" "),v("li",[t._v("前面讲的取消 CSS 或者 JavaScript 中关键资源的方式。")])]),t._v(" "),v("h3",{attrs:{id:"如何减少关键资源-rtt-的次数？"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#如何减少关键资源-rtt-的次数？"}},[t._v("#")]),t._v(" 如何减少关键资源 RTT 的次数？")]),t._v(" "),v("ol",[v("li",[t._v("减少关键资源的个数和减少关键资源的大小搭配来实现。")]),t._v(" "),v("li",[t._v("使用 CDN 来减少每次 RTT 时长。")])]),t._v(" "),v("h3",{attrs:{id:"交互阶段优化"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#交互阶段优化"}},[t._v("#")]),t._v(" 交互阶段优化")]),t._v(" "),v("p",[t._v("谈交互阶段的优化，其实就是在谈渲染进程渲染帧的速度，因为在交互阶段，帧的渲染速度决定了交互的流畅度。因此讨论页面优化实际上就是讨论渲染引擎是如何渲染帧的，否则就无法优化帧率。")]),t._v(" "),v("p",[t._v("我们先来看看交互阶段的渲染流水线（如下图）。和加载阶段的渲染流水线有一些不同的地方是，在交互阶段没有了加载关键资源和构建 DOM、CSSOM 流程，通常是由 JavaScript 触发交互动画的。\n"),v("img",{attrs:{src:e(192),alt:"交互阶段"}})]),t._v(" "),v("p",[t._v("结合上图，我们来一起回顾下交互阶段是如何生成一个帧的。大部分情况下，生成一个新的帧都是由 JavaScript 通过修改 DOM 或者 CSSOM 来触发的。还有另外一部分帧是由 CSS 来触发的。")]),t._v(" "),v("p",[v("strong",[t._v("优化：一个大的原则就是让单个帧的生成速度变快")])]),t._v(" "),v("ol",[v("li",[t._v("减少 JavaScript 脚本执行时间，有时 JavaScript 函数的一次执行时间可能有几百毫秒，这就严重霸占了主线程执行其他渲染任务的时间。")])]),t._v(" "),v("blockquote",[v("p",[t._v("一种是将一次执行的函数分解为多个任务，使得每次的执行时间不要过久。")])]),t._v(" "),v("blockquote",[v("p",[t._v("另一种是采用 Web Workers。你可以把 Web Workers 当作主线程之外的一个线程，在 Web Workers 中是可以执行 JavaScript 脚本的，不过 Web Workers 中没有 DOM、CSSOM 环境，这意味着在 Web Workers 中是> 无法通过 JavaScript 来访问 DOM 的，所以我们可以把一些和 DOM 操作无关且耗时的任务放到 Web Workers 中去执行。")])]),t._v(" "),v("ol",{attrs:{start:"2"}},[v("li",[t._v("避免强制同步布局"),v("br"),t._v("\n在介绍强制同步布局之前，我们先来聊聊正常情况下的布局操作。通过 DOM 接口执行添加元素或者删除元素等操作后，是需要重新计算样式和布局的，不过正常情况下这些操作都是在另外的任务中异步完成的，这样做是为了避免当前的任务占用太长的主线程时间。")])]),t._v(" "),v("p",[v("strong",[t._v("所谓强制同步布局，是指 JavaScript 强制将计算样式和布局操作提前到当前的任务中。")]),v("br"),t._v("\n为了避免强制同步布局，我们可以调整策略，在修改 DOM 之前查询相关值")]),t._v(" "),v("ol",{attrs:{start:"3"}},[v("li",[t._v("避免布局抖动\n还有一种比强制同步布局更坏的情况，那就是布局抖动。所谓布局抖动，是指在一次 JavaScript 执行过程中，多次执行强制布局和抖动操作。为了直观理解，你可以看下面的代码：")])]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v('\nfunction foo() {\n    let time_li = document.getElementById("time_li")\n    for (let i = 0; i < 100; i++) {\n        let main_div = document.getElementById("mian_div")\n        let new_node = document.createElement("li")\n        let textnode = document.createTextNode("time.geekbang")\n        new_node.appendChild(textnode);\n        new_node.offsetHeight = time_li.offsetHeight;\n        document.getElementById("mian_div").appendChild(new_node);\n    }\n}\n')])])]),v("ol",{attrs:{start:"4"}},[v("li",[t._v("合理利用 CSS 合成动画\n合成动画是直接在合成线程上执行的，这和在主线程上执行的布局、绘制等操作不同，如果主线程被 JavaScript 或者一些布局任务占用，CSS 动画依然能继续执行。所以要尽量利用好 CSS 合成动画，如果能让 CSS 处理动画，就尽量交给 CSS 来操作。")])]),t._v(" "),v("p",[t._v("另外，如果能提前知道对某个元素执行动画操作，那就最好将其标记为 will-change，这是告诉渲染引擎需要将该元素单独生成一个图层。")]),t._v(" "),v("ol",{attrs:{start:"5"}},[v("li",[t._v("避免频繁的垃圾回收\n我们知道 JavaScript 使用了自动垃圾回收机制，如果在一些函数中频繁创建临时对象，那么垃圾回收器也会频繁地去执行垃圾回收策略。这样当垃圾回收操作发生时，就会占用主线程，从而影响到其他任务的执行，严重的话还会让用户产生掉帧、不流畅的感觉。")])]),t._v(" "),v("h2",{attrs:{id:"虚拟dom和实际的dom有何不同？"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#虚拟dom和实际的dom有何不同？"}},[t._v("#")]),t._v(" 虚拟DOM和实际的DOM有何不同？")]),t._v(" "),v("h3",{attrs:{id:"dom-缺陷"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#dom-缺陷"}},[t._v("#")]),t._v(" DOM 缺陷")]),t._v(" "),v("p",[t._v("我们可以调用document.body.appendChild(node)往 body 节点上添加一个元素，调用该 API 之后会引发一系列的连锁反应。首先渲染引擎会将 node 节点添加到 body 节点之上，然后触发"),v("strong",[t._v("样式计算、布局、绘制、栅格化、合成等任务，我们把这一过程称为重排。")]),t._v(" 除了重排之外，还有可能引起重绘或者合成操作，形象地理解就是“牵一发而动全身”。另外，对于 DOM 的不当操作还有可能引发强制同步布局和布局抖动的问题，这些操作都会大大降低渲染效率。因此，对于 DOM 的操作我们时刻都需要非常小心谨慎。")]),t._v(" "),v("p",[t._v("对于一些复杂的页面或者目前使用非常多的单页应用来说，其 DOM 结构是非常复杂的，而且还需要不断地去修改 DOM 树，每次操作 DOM 渲染引擎都需要进行重排、重绘或者合成等操作，因为 DOM 结构复杂，所生成的页面结构也会很复杂，对于这些复杂的页面，执行一次重排或者重绘操作都是非常耗时的，这就给我们带来了真正的性能问题。")]),t._v(" "),v("p",[t._v("所以我们需要有一种方式来减少 JavaScript 对 DOM 的操作，这时候虚拟 DOM 就上场了。")]),t._v(" "),v("h3",{attrs:{id:"什么是虚拟-dom"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#什么是虚拟-dom"}},[t._v("#")]),t._v(" 什么是虚拟 DOM")]),t._v(" "),v("h5",{attrs:{id:"虚拟-dom-到底要解决哪些事情"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#虚拟-dom-到底要解决哪些事情"}},[t._v("#")]),t._v(" 虚拟 DOM 到底要解决哪些事情")]),t._v(" "),v("ul",[v("li",[t._v("将页面改变的内容应用到虚拟 DOM 上，而不是直接应用到 DOM 上。")]),t._v(" "),v("li",[t._v("变化被应用到虚拟 DOM 上时，虚拟 DOM 并不急着去渲染页面，而仅仅是调整虚拟 DOM 的内部状态，这样操作虚拟 DOM 的代价就变得非常轻了。")]),t._v(" "),v("li",[t._v("在虚拟 DOM 收集到足够的改变时，再把这些变化一次性应用到真实的 DOM 上。")])]),t._v(" "),v("h3",{attrs:{id:"双缓存"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#双缓存"}},[t._v("#")]),t._v(" 双缓存")]),t._v(" "),v("p",[t._v("在开发游戏或者处理其他图像的过程中，屏幕从前缓冲区读取数据然后显示。但是很多图形操作都很复杂且需要大量的运算，比如一幅完整的画面，可能需要计算多次才能完成，如果每次计算完一部分图像，就将其写入缓冲区，那么就会造成一个后果，那就是在显示一个稍微复杂点的图像的过程中，你看到的页面效果可能是一部分一部分地显示出来，因此在刷新页面的过程中，会让用户感受到界面的闪烁。")]),t._v(" "),v("p",[t._v("而使用双缓存，可以让你先将计算的中间结果存放在另一个缓冲区中，等全部的计算结束，该缓冲区已经存储了完整的图形之后，再将该缓冲区的图形数据一次性复制到显示缓冲区，这样就使得整个图像的输出非常稳定。")]),t._v(" "),v("p",[t._v("在这里，你可以把虚拟 DOM 看成是 DOM 的一个 buffer，和图形显示一样，它会在完成一次完整的操作之后，再把结果应用到 DOM 上，这样就能减少一些不必要的更新，同时还能保证 DOM 的稳定输出。")]),t._v(" "),v("h3",{attrs:{id:"mvc-模式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#mvc-模式"}},[t._v("#")]),t._v(" MVC 模式")]),t._v(" "),v("p",[t._v("在各大设计模式当中，MVC 是一个非常重要且应用广泛的模式，因为它能将数据和视图进行分离，在涉及到一些复杂的项目时，能够大大减轻项目的耦合度，使得程序易于维护。")]),t._v(" "),v("p",[t._v("MVC 的基础结构：\n"),v("img",{attrs:{src:e(193),alt:"MVC"}})]),t._v(" "),v("h2",{attrs:{id:"渐进式网页应用（pwa）"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#渐进式网页应用（pwa）"}},[t._v("#")]),t._v(" 渐进式网页应用（PWA）")]),t._v(" "),v("p",[t._v("浏览器的三大进化路线：")]),t._v(" "),v("ul",[v("li",[t._v("第一个是应用程序 Web 化；")]),t._v(" "),v("li",[t._v("第二个是 Web 应用移动化；")]),t._v(" "),v("li",[t._v("第三个是 Web 操作系统化；")])]),t._v(" "),v("h3",{attrs:{id:"什么是-pwa？pwa-又是以什么方式切入到移动端的呢？"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#什么是-pwa？pwa-又是以什么方式切入到移动端的呢？"}},[t._v("#")]),t._v(" 什么是 PWA？PWA 又是以什么方式切入到移动端的呢？")]),t._v(" "),v("p",[v("strong",[t._v("PWA，全称是 Progressive Web App")]),t._v("，翻译过来就是渐进式网页应用。根据字面意思，它就是“渐进式 +Web 应用”。对于 Web 应用很好理解了，就是目前我们普通的 Web 页面，所以 PWA 所支持的首先是一个 Web 页面。至于“渐进式”，就需要从下面两个方面来理解。")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("站在 Web 应用开发者来说，PWA 提供了一个渐进式的过渡方案，让 Web 应用能逐步具有本地应用的能力。采取渐进式可以降低站点改造的代价，使得站点逐步支持各项新技术，而不是一步到位。")])]),t._v(" "),v("li",[v("p",[t._v("站在技术角度来说，PWA 技术也是一个渐进式的演化过程，在技术层面会一点点演进，比如逐渐提供更好的设备特性支持，不断优化更加流畅的动画效果，不断让页面的加载速度变得更快，不断实现本地应用的特性。")])])]),t._v(" "),v("p",[v("strong",[t._v("那么 Web 最大的优势是什么呢？")])]),t._v(" "),v("p",[t._v("自由和开放，所以大家就很容易对同一件事情达成共识，达成共识之后，一套代码就可以运行在各种设备之上了，这就是跨平台，这也恰恰是本地应用所不具备的。而对于小程序，倒是可以实现跨平台，但要让各家达成共识，目前来看，似乎还是非常不切实际的。")]),t._v(" "),v("p",[t._v("所以我给 PWA 的定义就是：**它是一套理念，渐进式增强 Web 的优势，并通过技术手段渐进式缩短和本地应用或者小程序的距离。**基于这套理念之下的技术都可以归类到 PWA。")]),t._v(" "),v("h3",{attrs:{id:"web-应用-vs-本地应用"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#web-应用-vs-本地应用"}},[t._v("#")]),t._v(" Web 应用 VS 本地应用")]),t._v(" "),v("p",[t._v("那相对于本地应用，Web 页面到底缺少了什么？")]),t._v(" "),v("ul",[v("li",[t._v("首先，Web 应用缺少离线使用能力，在离线或者在弱网环境下基本上是无法使用的。而用户需要的是沉浸式的体验，在离线或者弱网环境下能够流畅地使用是用户对一个应用的基本要求。")]),t._v(" "),v("li",[t._v("其次，Web 应用还缺少了消息推送的能力，因为作为一个 App 厂商，需要有将消息送达到应用的能力。")]),t._v(" "),v("li",[t._v("最后，Web 应用缺少一级入口，也就是将 Web 应用安装到桌面，在需要的时候直接从桌面打开 Web 应用，而不是每次都需要通过浏览器来打开。")])]),t._v(" "),v("p",[t._v("针对以上 Web 缺陷，PWA 提出了两种解决方案：通过引入 Service Worker 来试着解决离线存储和消息推送的问题，通过引入 manifest.json 来解决一级入口的问题。下面我们就来详细分析下 Service Worker 是如何工作的。")]),t._v(" "),v("h3",{attrs:{id:"什么是-service-worker"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#什么是-service-worker"}},[t._v("#")]),t._v(" 什么是 Service Worker")]),t._v(" "),v("p",[t._v("我们先来看看 Service Worker 是怎么解决离线存储和消息推送的问题。")]),t._v(" "),v("p",[t._v("它的主要思想是"),v("strong",[t._v("在页面和网络之间增加一个拦截器，用来缓存和拦截请求")]),t._v("。整体结构如下图所示：\n"),v("img",{attrs:{src:e(194),alt:"serviceWorker"}})]),t._v(" "),v("p",[t._v("在没有安装 Service Worker 之前，WebApp 都是直接通过网络模块来请求资源的。安装了 Service Worker 模块之后，WebApp 请求资源时，会先通过 Service Worker，让它判断是返回 Service Worker 缓存的资源还是重新去网络请求资源。一切的控制权都交由 Service Worker 来处理。")]),t._v(" "),v("h3",{attrs:{id:"service-worker-的设计思路"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#service-worker-的设计思路"}},[t._v("#")]),t._v(" Service Worker 的设计思路")]),t._v(" "),v("ol",[v("li",[t._v("架构")])]),t._v(" "),v("blockquote",[v("p",[t._v("通过前面"),v("strong",[t._v("页面循环系统")]),t._v("的分析，我们已经知道了 JavaScript 和页面渲染流水线的任务都是在页面主线程上执行的，如果一段 JavaScript 执行时间过久，那么就会阻塞主线程，使得渲染一帧的时间变长，从而让用户产生卡顿的感觉，这对用户来说体验是非常不好的。")])]),t._v(" "),v("blockquote",[v("p",[t._v("为了避免 JavaScript 过多占用页面主线程时长的情况，浏览器实现了 Web Worker 的功能。Web Worker 的目的是让 JavaScript 能够运行在页面主线程之外，不过由于 Web Worker 中是没有当前页面的 DOM 环境的，所以在 Web Worker 中只能执行一些和 DOM 无关的 JavaScript 脚本，并通过 postMessage 方法将执行的结果返回给主线程。所以说在 Chrome 中， Web Worker 其实就是在渲染进程中开启的一个新线程，它的生命周期是和页面关联的。")])]),t._v(" "),v("blockquote",[v("p",[v("strong",[t._v("“让其运行在主线程之外”就是 Service Worker 来自 Web Worker 的一个核心思想")]),t._v("。不过 Web Worker 是临时的，每次 JavaScript 脚本执行完成之后都会退出，执行结果也不能保存下来，如果下次还有同样的操作，就还得重新来一遍。所以 Service Worker 需要在 Web Worker 的基础之上加上储存功能。")])]),t._v(" "),v("blockquote",[v("p",[t._v("另外，由于 Service Worker 还需要会为多个页面提供服务，所以还"),v("strong",[t._v("不能把 Service Worker 和单个页面绑定起来")]),t._v("。在目前的 Chrome 架构中，Service Worker 是运行在浏览器进程中的，因为浏览器进程生命周期是最长的，所以在浏览器的生命周期内，能够为所有的页面提供服务。")])]),t._v(" "),v("ol",{attrs:{start:"2"}},[v("li",[t._v("消息推送")])]),t._v(" "),v("blockquote",[v("p",[v("strong",[t._v("消息推送也是基于 Service Worker 来实现的")]),t._v("。因为消息推送时，浏览器页面也许并没有启动，这时就需要 Service Worker 来接收服务器推送的消息，并将消息通过一定方式展示给用户。关于消息推送的细节这里我们就不详述了，如果你感兴趣的话可以自行搜索相关资料去学习。")])]),t._v(" "),v("ol",{attrs:{start:"3"}},[v("li",[t._v("安全")])]),t._v(" "),v("blockquote",[v("p",[t._v("关于安全，其中最为核心的一条就是 HTTP。我们知道，HTTP 采用的是明文传输信息，存在被窃听、被篡改和被劫持的风险，在项目中使用 HTTP 来传输数据无疑是“裸奔”。所以在设计之初，就考虑对 Service Worker 采用 HTTPS 协议，因为采用 HTTPS 的通信数据都是经过加密的，即便拦截了数据，也无法破解数据内容，而且 HTTPS 还有校验机制，通信双方很容易知道数据是否被篡改。关于 HTTPS 协议，我们会在最后的安全模块详细介绍。")])]),t._v(" "),v("blockquote",[v("p",[t._v("所以要使站点支持 Service Worker，首先必要的一步就是要将站点升级到 HTTPS。")])]),t._v(" "),v("blockquote",[v("p",[t._v("除了必须要使用 HTTPS，Service Worker 还需要同时支持 Web 页面默认的安全策略，诸如同源策略、内容安全策略（CSP）等，关于这些，后续我们也会详细介绍。")])]),t._v(" "),v("h2",{attrs:{id:"webcomponent-搭积木构建web应用"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#webcomponent-搭积木构建web应用"}},[t._v("#")]),t._v(" WebComponent(搭积木构建Web应用)")]),t._v(" "),v("h3",{attrs:{id:"什么是组件化呢？"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#什么是组件化呢？"}},[t._v("#")]),t._v(" 什么是组件化呢？")]),t._v(" "),v("p",[v("strong",[t._v("对内高内聚，对外低耦合")]),t._v("。对内各个元素彼此紧密结合、相互依赖，对外和其他组件的联系最少且接口简单。")]),t._v(" "),v("p",[t._v("大部分语言都能实现组件化，归根结底在于编程语言特性，大多数语言都有自己的函数级作用域、块级作用域和类，可以将内部的状态数据隐藏在作用域之下或者对象的内部，这样外部就无法访问了，然后通过约定好的接口和外部进行通信。")]),t._v(" "),v("p",[t._v("JavaScript 虽然有不少缺点，但是作为一门编程语言，它也能很好地实现组件化，毕竟有自己的函数级作用域和块级作用域，所以封装内部状态数据并提供接口给外部都是没有问题的。")]),t._v(" "),v("h3",{attrs:{id:"阻碍前端组件化的因素"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#阻碍前端组件化的因素"}},[t._v("#")]),t._v(" 阻碍前端组件化的因素")]),t._v(" "),v("p",[t._v("CSS 的全局属性会阻碍组件化，DOM 也是阻碍组件化的一个因素，因为在页面中只有一个 DOM，任何地方都可以直接读取和修改 DOM。所以使用 JavaScript 来实现组件化是没有问题的，但是 JavaScript 一旦遇上 CSS 和 DOM，那么就相当难办了。")]),t._v(" "),v("p",[t._v("渲染引擎会将所有的 CSS 内容解析为 CSSOM，在生成布局树的时候，会在 CSSOM 中为布局树中的元素查找样式，所以有两个相同标签最终所显示出来的效果是一样的，渲染引擎是不能为它们分别单独设置样式的。")]),t._v(" "),v("h3",{attrs:{id:"webcomponent-组件化开发"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#webcomponent-组件化开发"}},[t._v("#")]),t._v(" WebComponent 组件化开发")]),t._v(" "),v("p",[v("strong",[t._v("CSS 和 DOM 是阻碍组件化的两个因素")]),t._v("，那要怎么解决呢？")]),t._v(" "),v("p",[t._v("WebComponent 给出了解决思路，它提供了对局部视图封装能力，可以让 DOM、CSSOM 和 JavaScript 运行在局部环境中，这样就使得局部的 CSS 和 DOM 不会影响到全局。")]),t._v(" "),v("p",[t._v("前面我们说了，WebComponent 是一套技术的组合，具体涉及到了 Custom elements（自定义元素）、Shadow DOM（影子 DOM）和HTML templates（HTML 模板），详细内容你可以参考 MDN 上的相关链接")]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v("\n<!DOCTYPE html>\n<html>\n\n\n<body>\n    \x3c!--\n            一：定义模板\n            二：定义内部CSS样式\n            三：定义JavaScript行为\n    --\x3e\n    <template id=\"geekbang-t\">\n        <style>\n            p {\n                background-color: brown;\n                color: cornsilk\n            }\n\n\n            div {\n                width: 200px;\n                background-color: bisque;\n                border: 3px solid chocolate;\n                border-radius: 10px;\n            }\n        </style>\n        <div>\n            <p>time.geekbang.org</p>\n            <p>time1.geekbang.org</p>\n        </div>\n        <script>\n            function foo() {\n                console.log('inner log')\n            }\n        <\/script>\n    </template>\n    <script>\n        class GeekBang extends HTMLElement {\n            constructor() {\n                super()\n                //获取组件模板\n                const content = document.querySelector('#geekbang-t').content\n                //创建影子DOM节点\n                const shadowDOM = this.attachShadow({ mode: 'open' })\n                //将模板添加到影子DOM上\n                shadowDOM.appendChild(content.cloneNode(true))\n            }\n        }\n        customElements.define('geek-bang', GeekBang)\n    <\/script>\n\n\n    <geek-bang></geek-bang>\n    <div>\n        <p>time.geekbang.org</p>\n        <p>time1.geekbang.org</p>\n    </div>\n    <geek-bang></geek-bang>\n</body>\n\n\n</html>\n")])])]),v("p",[t._v("要使用 WebComponent，通常要实现下面三个步骤。")]),t._v(" "),v("p",[v("strong",[t._v("首先，使用 template 属性来创建模板")]),t._v("。利用 DOM 可以查找到模板的内容，但是模板元素是不会被渲染到页面上的，也就是说 DOM 树中的 template 节点不会出现在布局树中，所以我们可以使用 template 来自定义一些基础的元素结构，这些基础的元素结构是可以被重复使用的。一般模板定义好之后，我们还需要在模板的内部定义样式信息。")]),t._v(" "),v("p",[v("strong",[t._v("其次，我们需要创建一个 GeekBang 的类")]),t._v("。在该类的构造函数中要完成三件事：")]),t._v(" "),v("ul",[v("li",[t._v("查找模板内容；")]),t._v(" "),v("li",[t._v("创建影子 DOM；")]),t._v(" "),v("li",[t._v("再将模板添加到影子 DOM 上。")])]),t._v(" "),v("p",[t._v("上面最难理解的是影子 DOM，其实影子 DOM 的作用是将模板中的内容与全局 DOM 和 CSS 进行隔离，这样我们就可以实现元素和样式的私有化了。你可以把影子 DOM 看成是一个作用域，其内部的样式和元素是不会影响到全局的样式和元素的，而在全局环境下，要访问影子 DOM 内部的样式或者元素也是需要通过约定好的接口的。")]),t._v(" "),v("p",[t._v("总之，通过影子 DOM，我们就实现了 CSS 和元素的封装，在创建好封装影子 DOM 的类之后，我们就可以使用 customElements.define 来自定义元素了（可参考上述代码定义元素的方式）。")]),t._v(" "),v("p",[t._v("最后，就很简单了，可以像正常使用 HTML 元素一样使用该元素，如上述代码中的。")]),t._v(" "),v("p",[t._v("上述代码最终渲染出来的结果：")]),t._v(" "),v("p",[v("img",{attrs:{src:e(195),alt:"webComponent"}})]),t._v(" "),v("p",[t._v("从图中我们可以看出，影子 DOM 内部的样式是不会影响到全局 CSSOM 的。另外，使用 DOM 接口也是无法直接查询到影子 DOM 内部元素的，比如你可以使用document.getElementsByTagName('div')来查找所有 div 元素，这时候你会发现影子 DOM 内部的元素都是无法查找的，因为要想查找影子 DOM 内部的元素需要专门的接口，所以通过这种方式又将影子内部的 DOM 和外部的 DOM 进行了隔离。")]),t._v(" "),v("p",[t._v("通过影子 DOM 可以隔离 CSS 和 DOM，不过需要注意一点，影子 DOM 的 JavaScript 脚本是不会被隔离的，比如在影子 DOM 定义的 JavaScript 函数依然可以被外部访问，这是因为 JavaScript 语言本身已经可以很好地实现组件化了。")]),t._v(" "),v("h3",{attrs:{id:"浏览器如何实现影子-dom"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#浏览器如何实现影子-dom"}},[t._v("#")]),t._v(" 浏览器如何实现影子 DOM")]),t._v(" "),v("p",[t._v("关于 WebComponent 的使用方式我们就介绍到这里。WebComponent 整体知识点不多，内容也不复杂，我认为核心就是影子 DOM。上面我们介绍影子 DOM 的作用主要有以下两点：")]),t._v(" "),v("ol",[v("li",[t._v("影子 DOM 中的元素对于整个网页是不可见的；")]),t._v(" "),v("li",[t._v("影子 DOM 的 CSS 不会影响到整个网页的 CSSOM，影子 DOM 内部的 CSS 只对内部的元素起作用。")])]),t._v(" "),v("p",[t._v("那么浏览器是如何实现影子 DOM 的呢？下面我们就来分析下，如下图：\n"),v("img",{attrs:{src:e(196),alt:"shadow-dom"}})]),t._v(" "),v("p",[t._v("该图是上面那段示例代码对应的 DOM 结构图，从图中可以看出，我们使用了两次 geek-bang 属性，那么就会生成两个影子 DOM，并且每个影子 DOM 都有一个 shadow root 的根节点，我们可以将要展示的样式或者元素添加到影子 DOM 的根节点上，每个影子 DOM 你都可以看成是一个独立的 DOM，它有自己的样式、自己的属性，内部样式不会影响到外部样式，外部样式也不会影响到内部样式。")]),t._v(" "),v("p",[t._v("浏览器为了实现影子 DOM 的特性，在代码内部做了大量的条件判断，比如当通过 DOM 接口去查找元素时，渲染引擎会去判断 geek-bang 属性下面的 shadow-root 元素是否是影子 DOM，如果是影子 DOM，那么就直接跳过 shadow-root 元素的查询操作。所以这样通过 DOM API 就无法直接查询到影子 DOM 的内部元素了。")]),t._v(" "),v("p",[t._v("另外，当生成布局树的时候，渲染引擎也会判断 geek-bang 属性下面的 shadow-root 元素是否是影子 DOM，如果是，那么在影子 DOM 内部元素的节点选择 CSS 样式的时候，会直接使用影子 DOM 内部的 CSS 属性。所以这样最终渲染出来的效果就是影子 DOM 内部定义的样式。")])])}],r=e(0),s=Object(r.a)({},(function(){var t=this.$createElement;this._self._c;return this._m(0)}),v,!1,null,null,null);a.default=s.exports}}]);