(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{209:function(e,a,t){"use strict";t.r(a);var l=t(0),s=Object(l.a)({},(function(){var e=this.$createElement;this._self._c;return this._m(0)}),[function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("div",{staticClass:"content"},[t("h2",{attrs:{id:"一、介绍"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一、介绍"}},[e._v("#")]),e._v(" 一、介绍")]),e._v(" "),t("p",[e._v("本质上，webpack是一个用于现代javascript应用程序的静态模块打包工具，当 webpck 处理应用程序时，会内部构建一个依赖图(dependency graph), 此依赖图对应的映射到项目所需要的每一个模块，并生成一个或多个bundle.")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("npm  install webpack webpack-cli \n")])])]),t("h2",{attrs:{id:"二、环境差异"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二、环境差异"}},[e._v("#")]),e._v(" 二、环境差异")]),e._v(" "),t("ul",[t("li",[e._v("开发环境： 需要生成sourcemap文件； 需要打印debug信息；需要live reload 和 hot reload 的功能；")]),e._v(" "),t("li",[e._v("生产环境：可能需要分离css 成单独的文件，以使多个页面共享同一个CSS文件； 需要压缩HTML/CSS/JS 代码； 需要压缩图片")])]),e._v(" "),t("h2",{attrs:{id:"三、publicpath-区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#三、publicpath-区别"}},[e._v("#")]),e._v(" 三、publicPath 区别")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const path = require('path')\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\nmodule.exports = {\n​    mode: 'development',\n​    entry: './src/index.js',\n​    output: {\n​        path: path.resolve(__dirname, 'dist'),  \n​        filename: 'main.js',\n​        publicPath: '/devmiddlepath' \n​    },\n​    devServer: {\n​        port: 8000,\n​        open: true,\n​        hot: true,\n​        static: {\n​            directory: path.join(__dirname, 'assets'),\n​            publicPath: '/staticfile', \n​        },\n​        devMiddleware: {\n​            index: true,\n​            publicPath: '/devmiddlepath',\n​        }\n​    },\n​    plugins: [\n​        new HtmlWebpackPlugin({\n​            template: './public/index.html',\n​            filename: 'index.html'\n​        })\n​    ]\n}\n")])])]),t("h2",{attrs:{id:"四、babel-loader-babel-core-预设-的关系"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#四、babel-loader-babel-core-预设-的关系"}},[e._v("#")]),e._v(" 四、babel-loader & @babel/core & 预设 的关系")]),e._v(" "),t("ul",[t("li",[e._v("babel-loader:  作用是调用@babel/core；")]),e._v(" "),t("li",[e._v("@babel/core: 提供过程管理，把源代码转换成抽象语法树，本身并不知道具体转什么语法，靠预设；")]),e._v(" "),t("li",[e._v("预设（presets）：可以理解为各种plugins的集合")])]),e._v(" "),t("blockquote",[t("ol",[t("li",[e._v("先把ES6转成抽象语法树；@babel/core;")]),e._v(" "),t("li",[e._v("然后调用preset-env把ES6语法树转成ES5语法树; preset-env;")]),e._v(" "),t("li",[e._v("把ES5语法树转成ES5代码；@babel/core;")])])]),e._v(" "),t("h4",{attrs:{id:"_4-1-babel-loader"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-babel-loader"}},[e._v("#")]),e._v(" 4.1 babel-loader")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const core = require('@babel/core')\nconst path = require('path');\nfunction loader(source, inputSourceMap, overrides) {\n​    const options = {\n​        presets: ['@babel/preset-env'],\n​        inputSourceMap,\n​        sourceMaps: true,\n​        filename: path.basename(this.resourcePath)\n​    }\n​    const {code, map, ast} = core.transform(source, options)\n​    return this.callback(null, code, map, ast);\n}\nmodule.exports = loader;\n")])])]),t("h4",{attrs:{id:"_4-2-使用自定义的-loader-三种方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-使用自定义的-loader-三种方法"}},[e._v("#")]),e._v(" 4.2 使用自定义的 loader 三种方法")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("​    resolveLoader: {\n​        modules: [path.resolve('./loaders'), 'node_modules'] \n​    },\n​    module: {\n​        rules: [\n​            {\n​                test: /.jsx?$/,\n​                use: [ path.resolve('./loaders/babel-loader.js')]  \n​            },\n​        ]\n​    },\n")])])]),t("h4",{attrs:{id:"_4-3-babel-polyfill-babel-runtime-babel-plugin-transform-runtime"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-babel-polyfill-babel-runtime-babel-plugin-transform-runtime"}},[e._v("#")]),e._v(" 4.3 babel-polyfill && babel-runtime && babel-plugin-transform-runtime")]),e._v(" "),t("p",[e._v("webpack 使用babel:   npm install -D babel-loader @babel/core @babel/preset-env webpack")]),e._v(" "),t("h5",{attrs:{id:"_4-3-1-babel-polyfill"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-1-babel-polyfill"}},[e._v("#")]),e._v(" 4.3.1 babel-polyfill")]),e._v(" "),t("ul",[t("li",[e._v("Babel默认只转换新的 javascript 的语法，而不转换新的API，比如 Iterator，Generator, Set, Map, Proxy, Reflect, Symbol, Promise等全局对象，以及一些在全局对象上的方法，比如Object.assign,都不会转码；")]),e._v(" "),t("li",[e._v("比如,  ES6在Array对象上新增了 Array.from 方法，Babel就不会转码这个方法，如果想让这个方法运行，就必须使用babel-polyfill 来转换等；")]),e._v(" "),t("li",[e._v("babel-polyfill 是通过向全局对象和内置的prototype上添加方法来实现的，比如运行环境中不支持Array.find, 引入polyfill ，我们就可以使用es6方法来编写了，但是缺点就是会造成全局污染；")]),e._v(" "),t("li",[e._v("@babel/preset-env 为每一个环境的预设；"),t("br"),e._v('\n"useBuiltIns": false        此时不对polyfill做操作，如果引入@babel-polyfill,则无视配置的浏览器兼容，引入所有的polyfill；'),t("br"),e._v('\n"useBuiltIns": "entry"    根据配置的浏览器兼容，引入浏览器不兼容的polyfill,需要在入口文件手动添加 import "@babel-plyfill"，会自动根据browserlist 替换成浏览器不兼容的polyfill;需要手动引入；'),t("br"),e._v('\n"useBuiltIns": "usage"   需要的时候在自动引入，不需要手动引入；')])]),e._v(" "),t("blockquote",[t("p",[e._v("import 'core-js/stable.js'"),t("br"),e._v("\nimport 'regenerator-runtime/runtime'"),t("br"),e._v(" "),t("img",{attrs:{src:"/image/1523927904.png",alt:"执行结果",title:"执行结果截图index"}}),e._v(" "),t("strong",[e._v("如何使用babel-polyfill")])])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('require("@babel/polyfill");\n')])])]),t("h5",{attrs:{id:"_4-3-2-babel-runtime"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-2-babel-runtime"}},[e._v("#")]),e._v(" 4.3.2 babel-runtime")]),e._v(" "),t("ul",[t("li",[e._v("Babel为了解决全局空间污染的问题，提供了单独的babel-polyfill ；重新构造，所以体积比较大；")]),e._v(" "),t("li",[e._v("简单的说，babel-runtime 更像是一种按需加载的实现，哪里需要使用 Promise , 只要在这个文件头部 import Promise from 'babel-runtime/core-js/promise'")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const Promise = require ('@babel/runtime-corejs2/core-js/promise.js');\nexport const p = new Promise((resolve, reject) => {\n​    console.log(9999);\n​    resolve(true);\n});\nconsole.log(p)\n")])])]),t("p",[t("img",{attrs:{src:"/image/1523818106.png",alt:"执行结果"}})]),e._v(" "),t("h5",{attrs:{id:"_4-3-3-babel-plugin-transform-runtime"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-3-babel-plugin-transform-runtime"}},[e._v("#")]),e._v(" 4.3.3 babel-plugin-transform-runtime")]),e._v(" "),t("ul",[t("li",[e._v("启用插件 babel-plugin-transform-runtime 后，Babel就会使用 babel-runtime 下的工具函数; 就是可以在我们使用新的API时自动 import babel-runtime 里面的polyfill")]),e._v(" "),t("li",[e._v("当我们使用 async/await 时，自动引入 babel-runtime/regenerator;")]),e._v(" "),t("li",[e._v("当我们使用 ES6 的静态事件或者内置对象时，自动引入babel-runtime/core-js;")]),e._v(" "),t("li",[e._v("移除内联 babel helpers 并替换使用babel-runtime helpers 来替换；")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("loader: 'babel-loader',\n  options: {\n​    presets: ['@babel/preset-env'],\n​    plugins: [\n​      [\n​        '@babel/plugin-transform-runtime', {\n​          \"corejs\": 2,\n​        }\n​      ]\n  ]\n}\n")])])]),t("p",[t("img",{attrs:{src:"/image/1523992722.png",alt:"执行结果"}})]),e._v(" "),t("h2",{attrs:{id:"五、sourcemap"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#五、sourcemap"}},[e._v("#")]),e._v(" 五、SourceMap")]),e._v(" "),t("ul",[t("li",[e._v("sourcemap是为了解决开发代码与实际运行代码不一致时帮助我们 debug 到原始开发代码的技术")]),e._v(" "),t("li",[e._v("webpack 通过配置可以自动给我们 source maps 文件，map 文件是一种对应编译文件和源文件的方法\n"),t("img",{attrs:{src:"/image/1652864538221.jpg",alt:"执行结果"}})])]),e._v(" "),t("ul",[t("li",[e._v("看似配置项很多，其实只是五个关键字eval、 source-map、cheap、 module、和inline的任意组合\n"),t("img",{attrs:{src:"/image/1652864616350.jpg",alt:"执行结果"}})])]),e._v(" "),t("ol",[t("li",[e._v("顺序： [inline-|hidden-|eval-][nosources-][cheap-[module-]]source-map")]),e._v(" "),t("li",[e._v("new webpack.SourceMapDevToolPlugin({ filename: '[name].js.map', exclude: ['vendor.js'], });")])]),e._v(" "),t("blockquote",[t("ul",[t("li",[e._v("开发环境： eval-cheap-source-map,  cheap-module-source-map , => eval-source-map")]),e._v(" "),t("li",[e._v("正式环境：hidden-source-map")]),e._v(" "),t("li",[e._v("最佳实践：")]),e._v(" "),t("li",[e._v("开发环境：快（eval），信息全展示源码（module），且由于此时代码未压缩，不在意代码列信息（cheap），所以：devtool: 'eval-cheap-module-source-map';")]),e._v(" "),t("li",[e._v("生产环境: 我们不希望任何人在浏览器直接看到源码，不应该提供 sourcemap 给浏览器。所以：devtool: 'hidden-source-map';  把sourcemap 文件单独上传到内网；\n-一方面webpack会生成sourcemap文件以提供给错误收集工具比如sentry,另一方面又不会为budle 添加🚰注释，以避免浏览器使用")])])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("devtool: false,\nplugins: [\n   new webpack.SourceMapDevToolPlugin({\n​       filename: '[file].map',\n​       append: 'n//# sourceMappingURL=https://localhost:9000/[url]',\n   }),\n]\n")])])]),t("h2",{attrs:{id:"六、-mpa多页面配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#六、-mpa多页面配置"}},[e._v("#")]),e._v(" 六、 MPA多页面配置")]),e._v(" "),t("h4",{attrs:{id:"_6-1-直接写简单配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-1-直接写简单配置"}},[e._v("#")]),e._v(" 6.1 直接写简单配置")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" entry: {\n​        page1: './src/page1.js',\n​        page2: './src/page2.js',\n​    },\noutput: {\n​        path: path.resolve(__dirname, 'dist'),\n​        filename: '[name].js',\n​       \n},\nplugins: [\n​        new HtmlWebpackPlugin({\n​            template: './public/index.html',\n​            filename: 'page1.html',\n​            chunks: ['page1']\n​        }),\n​        new HtmlWebpackPlugin({\n​            template: './public/index.html',\n​            filename: 'page2.html',\n​            chunks: ['page2']\n​        })\n]\n")])])]),t("h4",{attrs:{id:"_6-2-野生-node-api"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-2-野生-node-api"}},[e._v("#")]),e._v(" 6.2 野生 node API")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const pages = fs.readdirSync(path.resolve(__dirname, 'pages'))\nlet entries = pages.reduce((result, cur) => {\n​    result[path.basename(cur, '.jsx')] = `./pages/${cur}`\n​    return result;\n},{})\nlet plugins = [];\npages.map(item => {\n​    console.log(999, item);\n​     plugins.push(\n​            new HtmlWebpackPlugin({\n​            template: 'public/index.html',\n​            filename: `${path.basename(item, '.jsx')}.html`,\n​            chunks: [`${path.basename(item, '.jsx')}`]\n​        })\n​    )\n})\nmodule.exports = (env) => {\n​    return {\n​        entry: entries,\n​        output: {\n​            filename: '[name].js',\n​            path: path.resolve(__dirname, 'dist'),\n​            clean: true,\n​           \n​        },\n​        plugins: [\n​            ...plugins,\n​            new webpack.DefinePlugin({\n​                \"process.env.NODE_ENV\": JSON.stringify(process.env.NODE_ENV),\n​            })\n​        ]\n​    }\n}\n")])])]),t("h4",{attrs:{id:"_6-3-借助-glob-库"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-3-借助-glob-库"}},[e._v("#")]),e._v(" 6.3 借助 glob  库")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const glob = require('glob');\nconst setMPA = () => {\n​    const entries = {};\n​    const htmlWebpackPlugins = [];\n​    const entryFiles = glob.sync(path.join(__dirname, './src/pages/*.js'));\n​    console.log(123,entryFiles);\n​    \n​    entryFiles.forEach(item => {\n​        let match = item.match(/src/pages/(.*).js/);\n​        let key = match[1]\n​        entries[key] = './' + match[0];\n​        htmlWebpackPlugins.push(\n​            new HtmlWebpackPlugin({\n​                template: './public/index.html',\n​                filename: `${key}.html`,\n​                chunks: [key]\n​            })\n​        )\n​    })\n​    \n​    console.log(111, entries, htmlWebpackPlugins);\n​    return {\n​        entries, htmlWebpackPlugins\n​    }\n}\nconst { entries, htmlWebpackPlugins } = setMPA();\n")])])]),t("h2",{attrs:{id:"七、引入第三方类库-lodash，jquery）"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#七、引入第三方类库-lodash，jquery）"}},[e._v("#")]),e._v(" 七、引入第三方类库(lodash，jquery）")]),e._v(" "),t("h4",{attrs:{id:"_7-1-直接引入"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-1-直接引入"}},[e._v("#")]),e._v(" 7.1 直接引入")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("import _ from 'lodash'\nconsole.log(_.join(['a', 'b', 'c'], '-'))\n")])])]),t("p",[e._v("缺点：每次都要引用")]),e._v(" "),t("h4",{attrs:{id:"_7-2-插件引入"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-2-插件引入"}},[e._v("#")]),e._v(" 7.2 插件引入")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("new webpack.ProvidePlugin({\n  $: 'jquery',\n  jQuery: 'jquery',\n});\n")])])]),t("p",[e._v("缺点：比较方便，不用手工引用，但不能在全局下使用, 只是注入到当前上下文；")]),e._v(" "),t("h4",{attrs:{id:"_7-3-注入全局-expose-loader"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-3-注入全局-expose-loader"}},[e._v("#")]),e._v(" 7.3 注入全局 (expose-loader)")]),e._v(" "),t("p",[e._v("7.3.1 内联loader形式")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// 第一种\nimport __ from 'expose-loader?exposes=__!lodash'\nconsole.log(_.join(['a', 'b', 'c'], '-'))\n\n// 第二种\nimport lodash from 'expose-loader?exposes=lodash!lodash'\nconsole.log(lodash.join(['a', 'b', 'c'], '-'));\n")])])]),t("p",[e._v("7.3.2 配置形式")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// src/index.js\nimport 'lodash'   // 注意这里一定要引入，import require 都可以\nconsole.log(lodash.join(['a', 'b', 'c'], '-'));\n\n// webpack.config.js 文件\n    module: {\n        rules: [ \n            {\n                test: require.resolve(\"lodash\"),\n                loader: \"expose-loader\",\n                options: {\n                    exposes: \"lodash\"\n                },\n            },\n       \t]\n    }\n")])])]),t("h4",{attrs:{id:"_7-4-cdn-形式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-4-cdn-形式"}},[e._v("#")]),e._v(" 7.4 CDN 形式")])])}],!1,null,null,null);a.default=s.exports}}]);